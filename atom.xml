<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wilson Blog</title>
  
  <subtitle>一名普通的搬砖工</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wilson-he.gitee.io/"/>
  <updated>2020-04-20T07:28:46.985Z</updated>
  <id>https://wilson-he.gitee.io/</id>
  
  <author>
    <name>Wilson He</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个普通程序猿的文章索引页</title>
    <link href="https://wilson-he.gitee.io/undefined/"/>
    <id>https://wilson-he.gitee.io/undefined/</id>
    <published>2020-04-20T07:28:46.984Z</published>
    <updated>2020-04-20T07:28:46.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDK基础"><a href="#JDK基础" class="headerlink" title="JDK基础"></a>JDK基础</h1><ul><li><a href="/Java基础">Java基础</a></li><li>Java常用集合<ul><li><a href="/list">ArrayList与LinkedList区别与源码分析</a></li></ul></li></ul><h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><h1 id="框架文档"><a href="#框架文档" class="headerlink" title="框架文档"></a>框架文档</h1><ul><li><a href="https://mybatis.plus/guide/" target="_blank" rel="noopener">Mybatis Plus</a></li><li><a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener">携程apollo</a></li><li><a href="https://github.com/apache/rocketmq-spring/wiki" target="_blank" rel="noopener">rocketmq-spring</a></li><li><a href="http://kafka.apachecn.org/" target="_blank" rel="noopener">Kafka</a></li><li><a href="https://github.com/spring-projects/spring-boot/wiki" target="_blank" rel="noopener">Spring Boot Release Notes-了解新版特性</a></li><li><a href="https://github.com/Wilson-He/swagger2-spring-boot-starter" target="_blank" rel="noopener">个人开源swagger2-spring-boot-starter框架</a></li><li><a href="https://gitee.com/Wilson-He/generator-maven-plugin" target="_blank" rel="noopener">个人开源mybatis plus maven代码生成器插件</a></li></ul><h1 id="常用软件文档"><a href="#常用软件文档" class="headerlink" title="常用软件文档"></a>常用软件文档</h1><ul><li><a href="https://dev.mysql.com/doc/" target="_blank" rel="noopener">MySQL</a></li><li><a href="http://nginx.org/en/docs/" target="_blank" rel="noopener">Nginx</a></li><li><a href="https://docs.docker.com/" target="_blank" rel="noopener">docker</a></li><li><a href="https://hub.docker.com/u/library" target="_blank" rel="noopener">docker hub</a></li><li><a href="https://jenkins.io/zh/doc/" target="_blank" rel="noopener">Jenkins</a></li></ul><h1 id="个人常用工具"><a href="#个人常用工具" class="headerlink" title="个人常用工具"></a>个人常用工具</h1><ul><li><a href="http://www.baidu.com/link?url=HQhRL3UQ03YHc7-rGfijpY8aBYbgMOFkLCIiz2rVGwjAi3zwLviXMR3SgfoCMM2w&wd=&eqid=d2eb5eff0001257f000000065e85a396" target="_blank" rel="noopener">Postman</a></li><li><a href="https://plugins.jetbrains.com/" target="_blank" rel="noopener">Intellij插件</a><ul><li><a href="https://plugins.jetbrains.com/plugin/9837-mybatiscodehelperpro" target="_blank" rel="noopener">MyBatisCodeHelperPro</a></li><li><a href="https://plugins.jetbrains.com/plugin/8579-translation" target="_blank" rel="noopener">Translation</a></li><li><a href="https://plugins.jetbrains.com/plugin/6317-lombok" target="_blank" rel="noopener">Lombok</a></li><li><a href="https://plugins.jetbrains.com/plugin/7179-maven-helper" target="_blank" rel="noopener">Maven Helper</a></li><li><a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines" target="_blank" rel="noopener">Alibaba Java Coding Guidelines</a></li></ul></li><li><a href="https://boostnote.io/" target="_blank" rel="noopener">Markdown编辑器Boostnote</a><ul><li><a href="https://github.com/BoostIO/Boostnote/wiki" target="_blank" rel="noopener">Wiki文档</a></li><li><a href="http://plantuml.com/" target="_blank" rel="noopener">plantuml语法绘制UML文档</a></li><li><a href="http://www.plantuml.com/plantuml/uml/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000" target="_blank" rel="noopener">plantuml语法绘制UML网站</a></li></ul></li></ul><h1 id="在线工具网站"><a href="#在线工具网站" class="headerlink" title="在线工具网站"></a>在线工具网站</h1><ul><li><a href="https://linuxize.com/" target="_blank" rel="noopener">linux各软件安装教程</a></li><li><a href="https://www.json.cn/" target="_blank" rel="noopener">json格式化</a></li><li><a href="https://www.toyaml.com/index.html" target="_blank" rel="noopener">yaml与properties配置互转</a></li></ul><h1 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h1><ul><li><a href="https://lingcoder.gitee.io/onjava8/#/" target="_blank" rel="noopener">《Java编程思想》Java 8</a></li><li><a href="http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/README" target="_blank" rel="noopener">《Effective Java》第三版</a></li></ul><h1 id="实战范例"><a href="#实战范例" class="headerlink" title="实战范例"></a>实战范例</h1><ul><li><a href="/聊聊mq与如何基于spring%20boot%20RocketMQ搭建一个消息中心">聊聊MQ与如何基于Spring Boot RocketMQ搭建一个消息中心</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JDK基础&quot;&gt;&lt;a href=&quot;#JDK基础&quot; class=&quot;headerlink&quot; title=&quot;JDK基础&quot;&gt;&lt;/a&gt;JDK基础&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/Java基础&quot;&gt;Java基础&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java常用集合&lt;ul&gt;
&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>聊聊MQ与如何基于Spring Boot RocketMQ搭建一个消息中心</title>
    <link href="https://wilson-he.gitee.io/%E8%81%8A%E8%81%8AMQ%E4%B8%8E%E5%A6%82%E4%BD%95%E5%9F%BA%E4%BA%8ESpring%20Boot%20RocketMQ%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%B6%88%E6%81%AF%E4%B8%AD%E5%BF%83/"/>
    <id>https://wilson-he.gitee.io/%E8%81%8A%E8%81%8AMQ%E4%B8%8E%E5%A6%82%E4%BD%95%E5%9F%BA%E4%BA%8ESpring%20Boot%20RocketMQ%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%B6%88%E6%81%AF%E4%B8%AD%E5%BF%83/</id>
    <published>2020-04-20T07:27:02.434Z</published>
    <updated>2020-04-20T07:27:02.450Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>在引入一项技术之前，首先必须清楚的是该技术可以为项目解决什么问题。个人在了解消息队列(Message Queue)之前，以为消息队列主是用于发送短信、邮件等消息发送(异步解耦)，但深入理解才发现自己的理解错了，MQ的作用不止体现在一些用户接收到的具体消息里，还可用于其它应用的数据发送、通用的业务处理等。<br>消息队列从字面上意思解读就是将消息存放到队列里，根据队列FIFO(先入先出)的特性进行消息消费。在实际开发中，是一种跨进程的通信机制，用于应用间的消息传递。 </p><h2 id="在引入MQ之前，需要了解的优缺点与应用场景"><a href="#在引入MQ之前，需要了解的优缺点与应用场景" class="headerlink" title="在引入MQ之前，需要了解的优缺点与应用场景"></a>在引入MQ之前，需要了解的优缺点与应用场景</h2><hr><p>MQ的主要优点为<strong>解耦</strong>、<strong>异步</strong>、<strong>削峰</strong>，以下举一个简单的场景来反应这几个特性。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9rbm93bGVkZ2UtcGljdHVyZXMub3NzLWNuLWJlaWppbmcuYWxpeXVuY3MuY29tL1JvY2tldE1RL01RJUU4JUFFJUEyJUU1JThEJTk1JUU0JUI4JTlBJUU1JThBJUExJUU2JUExJTg4JUU0JUJFJThCLnBuZw?x-oss-process=image/format,png" alt="MQ%E8%AE%A2%E5%8D%95%E4%B8%9A%E5%8A%A1%E6%A1%88%E4%BE%8B.png"></p><p>在微服务项目中，一般会根据核心业务进行系统的垂直拆分再进行单独部署。在上图中，各系统在下单业务里主要负责的内容如下：</p><ul><li>订单系统：创建订单，将下单消息(如订单id、用户数据)发送到MQ</li><li>MQ：限制每秒的订单请求处理数(如每秒接收2000个请求但数据库只能处理1000个则只处理1000个，处理不过来的先在消息队列里堆积)</li><li>物流系统：创建订单物流信息</li><li>积分系统：用户购物积分信息更新</li></ul><p>想象下以上场景没有MQ的的存在时创建订单流程中存在的问题：</p><ul><li>订单系统创建完订单信息后要去调用物流系统、积分系统上的业务接口，系统严重的<strong>耦合</strong>在一起(解耦)</li><li>订单系统若非通过线程去调用其它系统的接口，还需同步等待返回浪费不少时间(异步，避免创建线程调用的麻烦)</li><li>用户高峰期请求过多数据库处理不过来进而导致应用崩溃(削峰)</li></ul><p>任何事物都有两面性，虽然MQ可以给系统解决不少问题，但也会引入一些问题，如：</p><ul><li>系统复杂度提高，需要考虑消息重复消费、消息丢失等问题</li><li>数据一致性问题，如上例中的物流或库存系统写库出现异常如何回滚补偿</li></ul><p>了解了MQ的一些特性后，再讨论下几个适合使用MQ的场景：</p><ul><li>上游系统不关心下游的执行结果(如用户注册成功后用户系统通过MQ向用户发送邮件，但发送成不成功用户系统根本不在意)</li><li>依赖于数据的定时任务(如下单后24小时内不支付则取消订单，申请退款72小时内商家不处理则自动退款)</li></ul><h2 id="引入MQ后的一些问题解决思路"><a href="#引入MQ后的一些问题解决思路" class="headerlink" title="引入MQ后的一些问题解决思路"></a>引入MQ后的一些问题解决思路</h2><hr><ul><li><h3 id="消息重复消费-保证消息的幂等性"><a href="#消息重复消费-保证消息的幂等性" class="headerlink" title="消息重复消费(保证消息的幂等性)"></a>消息重复消费(保证消息的幂等性)</h3><blockquote><p>幂等性：对于同一操作的请求无论请求多少次结果都是一致的，在MQ中的具体体现为同一条消息无论发送都少次都会被消费一次。</p></blockquote><p>  由于网络抖动(延迟)的原因消息重复发送的问题是不可避免的，如果在消费端消费时没有做好消息的幂等性保证就有可能出现重复消费，导致同一条消息被多次消费、写库多次的情况。比较常见的做法是为消息添加一个唯一标识(ID)，在消费时根据ID查询数据库是否存在该消息记录，如果不存在再插入消息，存在则不进行插入消费。当生成与消费时间间隔不长时，可使用Redis提高消息幂等性的效率，如：</p><ol><li><p>消费者消费前根据ID去查询redis是否存在该消息</p></li><li><p>不存在该消息则消费并写入redis，存在该消息则不消费返回</p><p>关于消息ID：</p></li><li><p>RocketMQ的每条消息都会配有全局唯一的ID</p></li><li><p>如果消息中间件不会生成ID，可考虑一些ID服务(如雪花算法)生成全局唯一ID</p></li><li><p>建议ID不与实际业务关联</p></li></ol></li></ul><p>如目前个人工作中负责的消息中心应用是基于MongoDB+RocketMQ的技术架构，MongoDB负责存储各个应用发送过来的消息(主要为Sms、Email等)，每次消费前通过RocketMQ的Message ID查询Mongo保证消息幂等性避免重复消费，消费成功后更新DB中的消息状态。</p><ul><li><h3 id="消息丢失-消息的可靠性"><a href="#消息丢失-消息的可靠性" class="headerlink" title="消息丢失(消息的可靠性)"></a>消息丢失(消息的可靠性)</h3>  MQ各组件的消息丢失含义都有所不同，导致与解决方案也不一定相同，以kafka、rocket的消息传递模型(Producer-&gt;Broker-&gt;Consumer)为例：<ul><li>Producer：消息未持久化到Broker中，或消费者未能成功消费到消息。Kafka可通过更改ack配置解决，rocketMQ中会返回消息发送状态码。</li><li>Broker：消息成功传到到我这里了，可我因为某些原因(不同的MQ可能因机制问题有不同原因)弄丢了，如果是硬件原因(如宕机、磁盘损坏)建议你copy(集群部署)几个我</li><li>Consumer：我拿到了消息，但消费失败了或中途挂掉了没告诉Broker。可通过各MQ中间件的ACK机制解决。</li></ul></li></ul><h2 id="基于RocketMQ的简单例子技术框架与业务模型"><a href="#基于RocketMQ的简单例子技术框架与业务模型" class="headerlink" title="基于RocketMQ的简单例子技术框架与业务模型"></a>基于RocketMQ的简单例子技术框架与业务模型</h2><hr><p>以下便以一个基于MongoDB+RocketMQ+Eureka+Spring Cloud Config的技术框架并结合使用MQ中的问题搭建一个简单的消息中心项目案例，其中各组件在项目中的主要作用如下：</p><ul><li>Spring Cloud Config：消息配置(如topic、ConsumerGroup、ProducerGroup)中心。</li><li>Eureka：应用服务注册中心，负责项目中各服务的发现与提供调用。</li><li>MongoDB：由于消息的事务关系不强且Mongodb格式文档自由(json存储，随意增删字段)，所以使用Mongodb存储各个应用发送过来的消息(主要为Sms、Email等)，每次消费前通过RocketMQ的Message ID查询Mongo保证消息幂等性避免重复消费，消费成功后保存消息。</li><li>RocketMQ：消息接收、存储、发送。</li></ul><p>下图为该项目的应用关系模型：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9rbm93bGVkZ2UtcGljdHVyZXMub3NzLWNuLWJlaWppbmcuYWxpeXVuY3MuY29tL1JvY2tldE1RL01RJUU2JUI2JTg4JUU2JTgxJUFGJUU1JUJBJTk0JUU3JTk0JUE4JUU2JUExJTg4JUU0JUJFJThCLnBuZw?x-oss-process=image/format,png" alt="MQ%E6%B6%88%E6%81%AF%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B.png"></p><p>消息中心应用：统一通用消息的业务处理应用，如短信发送、邮件发送、员工服务号推送等消息的处理<br>问卷应用：负责员工调查问卷的分发，在该例子中只是一个简单的消息发送测试应用<br>common：存放各应用通用类，如短信消息类(SmsMessage)、消息常量类<br>config-server-properties：配置中心的配置存放目录<br>由于该项目主要用于演示一些MQ的功能与使用中的问题解决方式，所以编码部分比较简单。</p><h2 id="应用例子编码"><a href="#应用例子编码" class="headerlink" title="应用例子编码"></a>应用例子编码</h2><ul><li><h3 id="通用模块编码-common"><a href="#通用模块编码-common" class="headerlink" title="通用模块编码(common)"></a>通用模块编码(common)</h3><p>通用模块主要存放各应用通用类(如实体、常量、配置、功能等)。<br>  <strong>MessageConstant：维护消息常量</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public interface MessageConstant &#123;</span><br><span class="line"></span><br><span class="line">    interface System &#123;</span><br><span class="line">        String QUESTION &#x3D; &quot;QUESTION&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    interface Topic &#123;</span><br><span class="line">        String SMS_TOPIC &#x3D; &quot;rocketmq.topic.sms&quot;;</span><br><span class="line">        String SMS_TOPIC_TEMPLATE &#x3D; &quot;$&#123;rocketmq.topic.sms&#125;&quot;;</span><br><span class="line">        String MAIL_TOPIC &#x3D; &quot;rocketmq.topic.mail&quot;;</span><br><span class="line">        String MAIL_TOPIC_TEMPLATE &#x3D; &quot;$&#123;rocketmq.topic.mail&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    interface Producer &#123;</span><br><span class="line">        String SMS_GROUP_TEMPLATE &#x3D; &quot;$&#123;rocketmq.producer.group.sms&#125;&quot;;</span><br><span class="line">        String MAIL_GROUP_TEMPLATE &#x3D; &quot;$&#123;rocketmq.producer.group.mail&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    interface Consumer &#123;</span><br><span class="line">        String SMS_GROUP_TEMPLATE &#x3D; &quot;$&#123;rocketmq.consumer.group.sms&#125;&quot;;</span><br><span class="line">        String MAIL_GROUP_TEMPLATE &#x3D; &quot;$&#123;rocketmq.consumer.group.mail&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>BaseMessage：基础消息类，所用的通用消息都需继承此类方便统一信息的管理</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@Accessors(chain &#x3D; true)</span><br><span class="line">public abstract class BaseMessage implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 消息源系统:&#123;@link io.wilson.common.message.constant.MessageConstant.System&#125;</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String system;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>SmsMessage：通用短信消息类，短信内容数据载体</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@EqualsAndHashCode(callSuper &#x3D; true)</span><br><span class="line">@Data</span><br><span class="line">@Accessors(chain &#x3D; true)</span><br><span class="line">@ToString(callSuper &#x3D; true)</span><br><span class="line">public class SmsMessage extends BaseMessage &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 短信创建用户</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String createUserId;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 接收短信用户</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String toUserId;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 手机号码</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String mobile;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 短信内容</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String content;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="消息中心应用-message-center"><a href="#消息中心应用-message-center" class="headerlink" title="消息中心应用(message-center)"></a>消息中心应用(message-center)</h3><p>  消息中心在进行编码之前，需确认消息中心该如何进行消息的处理。该项目所处的业务环境是各应用可能都需要发送一些短信消息、邮件、服务号消息等，相同消息的业务处理是一致的，所以消息中心对消息接收消费的主要流程如下：</p><ul><li>保证消息幂等性(查询数据库使用已有消息记录避免重复消费)</li><li>消息业务处理</li><li>消息日志入库</li></ul><p>在该项目中，不同的消息类型存储在不同的Mongodb collection(同Mysql table概念)，但共用一个消息日志类MessageLog：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@Accessors(chain &#x3D; true)</span><br><span class="line">public class MessageLog implements Serializable &#123;</span><br><span class="line">    private String msgId;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 发送方系统名称 &#123;@link io.wilson.common.message.constant.MessageConstant&#125;</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String system;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 消息对象json字符串</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private String msgContent;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 业务执行结果</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private Boolean success;</span><br><span class="line">    private LocalDateTime createTime;</span><br><span class="line">    private LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 初始化消息记录</span><br><span class="line">     *</span><br><span class="line">     * @param message       消息</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static &lt;T extends BaseMessage&gt; MessageLog convertFromMessage(T message) &#123;</span><br><span class="line">        LocalDateTime now &#x3D; LocalDateTime.now();</span><br><span class="line">        return new MessageLog()</span><br><span class="line">                .setSystem(message.getSystem())</span><br><span class="line">                .setSuccess(false)</span><br><span class="line">                .setCreateTime(now)</span><br><span class="line">                .setUpdateTime(now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  在该消费流程设计与开发编码过程中个人考虑的核心点如下：</p><ol><li>如果使用普通消息类(如SmsMessage)作为db存储的映射对象，会导致消息类掺杂不必要的属性(如createTime、updateTime、success)，且作为一个通用的消息数据载体，普通消息类更适于作为一个VO而非DO使用，所以消息的处理结果、消息的创建更新时间这些作为原消息上的附加内容，更适合放到其它数据库映射对象中维护，所以定义了MessageLog作为消息记录的实体类</li><li>既然是作为各应用都可使用的通用消息所以肯定都会有一定数据量，虽然映射实体都一样，但存放到不同的collection可以提高操作的便捷性和获得更好的性能，系统编码可以更好地根据系统进行消息筛选</li><li>在消息消费流程中，保证消息幂等性和消息日志入库这两步只有数据库名是不同的，所以可定义一个父Listener进行消息监听消费的方法抽象，不同消息的业务处理交给不同的消息Service，同一类消息的消费可能会再细分调用不同的消息业务方法消费(如发送单条短信、批量发送短信)，所以可以对各service抽象出一个consume()方法根据参数调用具体的service业务方法进行消息消费</li></ol><ul><li><h4 id="消息中心类图与消费流程图"><a href="#消息中心类图与消费流程图" class="headerlink" title="消息中心类图与消费流程图"></a>消息中心类图与消费流程图</h4><p>为了更好地展示消息中心中类之间的关系，描绘以下类图：<br> <img src="https://img-blog.csdnimg.cn/20200309131427286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3oyODEyNjMwOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">      </p><p>当一条短信消息发送到消息中心时，其消费流程如下图：<br><img src="https://img-blog.csdnimg.cn/20200309131600757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3oyODEyNjMwOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><h4 id="消息业务处理编码"><a href="#消息业务处理编码" class="headerlink" title="消息业务处理编码"></a>消息业务处理编码</h4><p>  <strong>BaseMessageService：消息业务消费抽象接口，抽象每个消费者(Listener)调用的业务消费方法</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public interface BaseMessageService&lt;T extends BaseMessage&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 消费消息</span><br><span class="line">     *</span><br><span class="line">     * @param message         消息</span><br><span class="line">     * @param consumeFunction 消费方法</span><br><span class="line">     *&#x2F;</span><br><span class="line">    default boolean consume(T message, Function&lt;T, Boolean&gt; consumeFunction) &#123;</span><br><span class="line">        return consumeFunction.apply(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>BaseMessageService：短信消息业务抽象接口</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public interface SmsMessageService extends BaseMessageService&lt;SmsMessage&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 发送单条短信消息</span><br><span class="line">     *</span><br><span class="line">     * @param smsMessage</span><br><span class="line">     * @return 业务处理结果</span><br><span class="line">     *&#x2F;</span><br><span class="line">    boolean sendSingle(SmsMessage smsMessage);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>SmsMessageServiceImpl：短信消息业务实现类</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">@Slf4j</span><br><span class="line">public class SmsMessageServiceImpl implements SmsMessageService &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean sendSingle(SmsMessage smsMessage) &#123;</span><br><span class="line">        &#x2F;&#x2F; 短信业务操作结果</span><br><span class="line">        boolean isSuccess &#x3D; true;</span><br><span class="line">        &#x2F;*</span><br><span class="line">         * 短信业务操作并把操作结果设到isSuccess中</span><br><span class="line">         *&#x2F;</span><br><span class="line">        if (Objects.equals(smsMessage.getToUserId(), &quot;Wilson&quot;)) &#123;</span><br><span class="line">            isSuccess &#x3D; false;</span><br><span class="line">            log.info(&quot;短信发送失败,消息内容:&#123;&#125;&quot;, smsMessage);</span><br><span class="line">        &#125;</span><br><span class="line">        return isSuccess;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="消息业务处理编码-1"><a href="#消息业务处理编码-1" class="headerlink" title="消息业务处理编码"></a>消息业务处理编码</h4><p>  <strong>MessageLogConstant：维护MessageLog的相关常量(如不同消息的collection名)</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public interface MessageLogConstant &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 各消息日志Mongo集合名</span><br><span class="line">     *&#x2F;</span><br><span class="line">    interface CollectionName &#123;</span><br><span class="line">        String SMS &#x3D; &quot;sms_message_log&quot;;</span><br><span class="line">        String MAIL &#x3D; &quot;mail_message_log&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>AbstractMQStoreListener：保证消息幂等性、消息日志入库操作的抽象Listener类方法中</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">public abstract class AbstractMQStoreListener &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    protected MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 判断消息是否已被消费</span><br><span class="line">     *</span><br><span class="line">     * @param msgId</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected boolean isConsumed(String msgId) &#123;</span><br><span class="line">        long count &#x3D; mongoTemplate.count(new Query(Criteria.where(&quot;msg_id&quot;).is(msgId)), collection());</span><br><span class="line">        if (count &gt; 0) &#123;</span><br><span class="line">            log.info(&quot;消息&#123;&#125;已成功消费过，请勿重复投递!&quot;, msgId);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 当前消息的mongo collection名:&#123;@link io.wilson.message.domain.constant.MessageLogConstant.CollectionName&#125;</span><br><span class="line">     *</span><br><span class="line">     * @return 当前消息存储的collection名</span><br><span class="line">     *&#x2F;</span><br><span class="line">    protected abstract String collection();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 保存消息消费记录</span><br><span class="line">     *</span><br><span class="line">     * @param success 业务执行结果</span><br><span class="line">     * @param msgId   消息id</span><br><span class="line">     * @param message</span><br><span class="line">     *&#x2F;</span><br><span class="line">    void store(boolean success, String msgId, BaseMessage message) &#123;</span><br><span class="line">        MessageLog messageLog &#x3D; MessageLog.convertFromMessage(message)</span><br><span class="line">                .setMsgId(msgId)</span><br><span class="line">                .setMsgContent(JSONObject.toJSONString(message))</span><br><span class="line">                .setSuccess(success);</span><br><span class="line">        mongoTemplate.insert(messageLog, collection());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>SmsMessageListener:短信消息监听器(消费者)，如在消费过程中抛出异常，RocketMQ会以一定的时间间隔进行重新投递消费</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Service</span><br><span class="line">@ConditionalOnProperty(MessageConstant.Topic.SMS_TOPIC)</span><br><span class="line">@RocketMQMessageListener(topic &#x3D; MessageConstant.Topic.SMS_TOPIC_TEMPLATE, consumerGroup &#x3D; MessageConstant.Consumer.SMS_GROUP_TEMPLATE)</span><br><span class="line">public class SmsMessageListener extends AbstractMQStoreListener implements RocketMQListener&lt;MessageExt&gt; &#123;</span><br><span class="line">    @Resource</span><br><span class="line">    private SmsMessageService smsMessageService;</span><br><span class="line">    private static final String EXCEPTION_FORMAT &#x3D; &quot;短信消息消费失败，消息内容：%s&quot;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onMessage(MessageExt message) &#123;</span><br><span class="line">        String msgId &#x3D; message.getMsgId();</span><br><span class="line">        if (isConsumed(msgId)) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        SmsMessage smsMessage &#x3D; JSONObject.parseObject(message.getBody(), SmsMessage.class);</span><br><span class="line">        log.info(&quot;接收到短信消息&#123;&#125;：&#123;&#125;&quot;, msgId, smsMessage);</span><br><span class="line">        &#x2F;*if (Objects.equals(smsMessage.getToUserId(), &quot;2020&quot;)) &#123;</span><br><span class="line">            log.error(&quot;消息&#123;&#125;消费失败&quot;, message.getMsgId());</span><br><span class="line">            &#x2F;&#x2F; 抛出异常让RocketMQ重新投递消息重新消费</span><br><span class="line">            throw new MQConsumeException(String.format(EXCEPTION_FORMAT, smsMessage));</span><br><span class="line">        &#125;*&#x2F;</span><br><span class="line">        boolean isSuccess &#x3D; smsMessageService.consume(smsMessage, smsMessageService::sendSingle);</span><br><span class="line">        if (!isSuccess) &#123;</span><br><span class="line">            log.info(&quot;短信消息业务操作失败,消息id: &#123;&#125;&quot;, msgId);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 保存消息消费记录</span><br><span class="line">        store(isSuccess, msgId, smsMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected String collection() &#123;</span><br><span class="line">        return MessageLogConstant.CollectionName.SMS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>MessageCenterApplication:主程序</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class MessageCenterApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(MessageCenterApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>Spring Cloud配置文件bootstrap.yml</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:8000&#x2F;eureka</span><br><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      discovery:</span><br><span class="line">        enabled: true</span><br><span class="line">        service-id: config-center</span><br><span class="line">      #     资源文件名</span><br><span class="line">      profile: dev</span><br><span class="line">      name: rocketmq</span><br></pre></td></tr></table></figure><p>  <strong>SmsSendTest：单元测试类</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest(classes &#x3D; MessageCenterApplication.class)</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">public class SmsSendTest &#123;</span><br><span class="line">    @Resource</span><br><span class="line">    private RocketMQTemplate rocketMQTemplate;</span><br><span class="line">    @Value(MessageConstant.Topic.SMS_TOPIC_TEMPLATE)</span><br><span class="line">    private String smsTopic;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void sendSms() &#123;</span><br><span class="line">        SmsMessage smsMessage &#x3D; new SmsMessage();</span><br><span class="line">        smsMessage.setToUserId(&quot;13211&quot;)</span><br><span class="line">                .setMobile(&quot;173333222&quot;)</span><br><span class="line">                .setContent(&quot;测试短信消息&quot;)</span><br><span class="line">                .setSystem(MessageConstant.System.QUESTION);</span><br><span class="line">        rocketMQTemplate.send(smsTopic, MessageBuilder.withPayload(smsMessage).build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><h3 id="配置中心-config-server"><a href="#配置中心-config-server" class="headerlink" title="配置中心(config-server)"></a>配置中心(config-server)</h3><p>主程序ConfigServerApplication</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableConfigServer</span><br><span class="line">public class ConfigServerApplication &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      SpringApplication.run(ConfigServerApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring Cloud配置文件bootstrap.yml:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      server:</span><br><span class="line">        git:</span><br><span class="line">          uri: https:&#x2F;&#x2F;gitee.com&#x2F;Wilson-He&#x2F;rocketmq-message-center-demo.git</span><br><span class="line">          username: Wilson-He</span><br><span class="line">          force-pull: true</span><br><span class="line">          password:</span><br><span class="line">          # 配置文件在uri下的目录</span><br><span class="line">          search-paths: &#x2F;config-server-properties</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:8000&#x2F;eureka</span><br></pre></td></tr></table></figure><p>配置文件configs-server-properties/rocketmq-dev.properties:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rocketmq.name-server&#x3D;127.0.0.1:9876</span><br><span class="line">rocketmq.topic.sms&#x3D;sms-topic</span><br><span class="line">rocketmq.producer.group.sms&#x3D;sms-group</span><br><span class="line">rocketmq.consumer.group.sms&#x3D;sms-group</span><br><span class="line">rocketmq.topic.mail&#x3D;mail-topic</span><br><span class="line">rocketmq.producer.group.mail&#x3D;mail-group</span><br><span class="line">rocketmq.consumer.group.mail&#x3D;mail-group</span><br></pre></td></tr></table></figure></li></ul><h2 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h2><ol><li>运行RocketMQ name-server与broker,如<code>mqnamesrv -n 127.0.0.1:9876</code>,<code>mqbroker -n 127.0.0.1:9876</code></li><li>运行eureka应用</li><li>运行配置中心config-server</li><li>运行消息中心message-center</li><li>运行message-center单元测试类(SmsSendTest)或运行question-app访问<code>localhost:8080/question/toUser?userId=xxx</code>进行消费测试，消息中心控制台打印出日志信息与Mongo sms_message_log成功新增了数据即项目搭建完成<br><img src="https://img-blog.csdnimg.cn/20200309131857721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3oyODEyNjMwOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200309131930100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3oyODEyNjMwOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><p><strong>(待)扩展点：</strong></p><ol><li>RocketMQ的发送者应用可在配置文件中设置rocketmq.producer.retry-times-when-send-failed/retry-times-when-send-async-failed属性配置rocketmq同步/异步发送消息失败后的重试次数，不设置则默认都为2</li><li>当业务执行操作结果失败时仍然入库的原因是有时业务执行过程中可能会包含调用第三方的操作，当第三方报错时会导致业务操作结果失败，而第三方的操作是不可控的，所以先把报错结果保存便于追溯，且有业务需要时也可通过定时任务查库重新执行业务</li><li>该例子中只用了一个消息配置文件，实际开发中消息配置需根据项目所需配置到对应的项目配置文件，如question-app的消息配置(如topc、producerGroup)应在其项目中的配置文件(如application.yml、apollo的namespace)中配置</li><li>该项目中的NameServer、Broker并没有集群部署，Broker集群部署后配置同步双写避免主机写入后尚未同步到从机就宕机导致消息丢失的情况(有意向的自行百度：RocketMQ 同步双写)</li></ol><h2 id="末"><a href="#末" class="headerlink" title="末"></a>末</h2><p>该文章通过一个简单的项目例子演示了使用Spring Boot RocketMQ处理MQ常见问题的一些方式：</p><ul><li>消息重复消费问题可通过数据库存储来保证幂等性</li><li>若消息消费业务操作失败时可通过Listener抛出异常让RocketMQ重新投递消息进行消费</li></ul><p><a href="https://github.com/Wilson-He/rocketmq-message-center-demo" target="_blank" rel="noopener">项目源码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;在引入一项技术之前，首先必须清楚的是该技术可以为项目解决什么问题。个人在了解消息队列(Message Queue)之前，以为消息队
      
    
    </summary>
    
    
      <category term="RocketMQ" scheme="https://wilson-he.gitee.io/categories/RocketMQ/"/>
    
      <category term="Spring Boot" scheme="https://wilson-he.gitee.io/categories/RocketMQ/Spring-Boot/"/>
    
    
      <category term="RocketMQ" scheme="https://wilson-he.gitee.io/tags/RocketMQ/"/>
    
      <category term="Spring Boot" scheme="https://wilson-he.gitee.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Java基础</title>
    <link href="https://wilson-he.gitee.io/Java%E5%9F%BA%E7%A1%80/"/>
    <id>https://wilson-he.gitee.io/Java%E5%9F%BA%E7%A1%80/</id>
    <published>2020-04-20T07:27:02.391Z</published>
    <updated>2020-04-20T07:27:02.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象编程的三大特性"><a href="#面向对象编程的三大特性" class="headerlink" title="面向对象编程的三大特性"></a>面向对象编程的三大特性</h2><hr><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>将对象不需要让外界访问的成员变量和方法私有化，只提供符合开发者意愿的公有方法来访问这些数据和逻辑，保证了数据的安全和程序的稳定。<br>java通过权限修饰符来控制类成员的访问权限，各修饰符的访问权限如下：</p><table><thead><tr><th>修饰符</th><th>当前类</th><th>同一个包</th><th>子类</th><th>其它</th></tr></thead><tbody><tr><td>private</td><td>√</td><td></td><td></td><td></td></tr><tr><td>默认</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承是指从已有的类中派生出新的类，新的类拥有父类非私有的属性与方法。继承的类叫做子类（派生类），被继承的类叫做父类（超类或者基类）。</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态是同一个行为具有多个不同表现形式或形态的能力。多态的优点：</p><ul><li>消除类型之间的耦合关系</li><li>可替换性</li><li>可扩充性</li><li>接口性</li><li>灵活性</li><li>简化性</li></ul><p>在Java中多态的两种主要形式：<strong>继承(多个子类对同一方法的重写)</strong>和<strong>实现(接口实现)</strong></p><h2 id="Java的基本数据类型"><a href="#Java的基本数据类型" class="headerlink" title="Java的基本数据类型"></a>Java的基本数据类型</h2><hr><table><thead><tr><th>数据类型</th><th>boolean</th><th>byte</th><th>char</th><th>short</th><th>int</th><th>long</th><th>float</th><th>double</th></tr></thead><tbody><tr><td>bit</td><td>32</td><td>8</td><td>16</td><td>16</td><td>32</td><td>64</td><td>64</td><td>64</td></tr><tr><td>最小值</td><td>-</td><td>-2^7</td><td>-2^15</td><td>-2^15</td><td>-2^31</td><td>-2^63</td><td>-2^63</td><td>-2^63</td></tr><tr><td>最大值</td><td>-</td><td>2^7-1</td><td>2^15-1</td><td>2^15-1</td><td>2^31-1</td><td>2^63-1</td><td>2^63-1</td><td>2^63-1</td></tr><tr><td>包装类型</td><td>Boolean</td><td>Byte</td><td>Character</td><td>Short</td><td>Integer</td><td>Long</td><td>Float</td><td>Double</td></tr></tbody></table><p>基本类型的两条准则：</p><ul><li>对整型数据不指定类型默认为int类型，浮点数默认为double类型</li><li>基本数据类型从小(字节)到大可以自动转换，从大到小需要进行类型强制转换(cast)</li></ul><blockquote><p>boolean类型会在编译时期被JVM转换为int,true为常量值1,false为0,如<code>boolean a = true;</code>查看字节码(javap -verbose xxx.class)会发现iconst_1指令，是指把int常量值1压入栈中，因此boolean需要4个字节进行存储。使用int的原因是对于当下32位的处理器（CPU）来说，一次处理数据是32位。而boolean数组会被编译为byte数组，故作为数组时，数组中的每个boolean元素只占一个字节。</p></blockquote><p>基本类型都有对应的包装类型，且对应的包装类型都被final标识，不可被继承。基本类型与包装类型之间的转换自动装箱与拆箱完成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer a &#x3D; 5; &#x2F;&#x2F; 装箱调用Integer.valueOf(2)</span><br><span class="line">int b &#x3D; a; &#x2F;&#x2F; 拆箱调用Integer.intValue()</span><br></pre></td></tr></table></figure><p>在 Java 8 中，大部分基本类型都有缓存值，如Integer通过其内部类IntegerCache的cache[]缓存了-128~127范围值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Cache to support the object identity semantics of autoboxing for values between</span><br><span class="line"> * -128 and 127 (inclusive) as required by JLS.</span><br><span class="line"> *</span><br><span class="line"> * The cache is initialized on first usage.  The size of the cache</span><br><span class="line"> * may be controlled by the &#123;@code -XX:AutoBoxCacheMax&#x3D;&lt;size&gt;&#125; option.</span><br><span class="line"> * During VM initialization, java.lang.Integer.IntegerCache.high property</span><br><span class="line"> * may be set and saved in the private system properties in the</span><br><span class="line"> * sun.misc.VM class.</span><br><span class="line"> *&#x2F;</span><br><span class="line">private static class IntegerCache &#123;</span><br><span class="line">    static final int low &#x3D; -128;</span><br><span class="line">    static final int high;</span><br><span class="line">    static final Integer cache[];</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当使用装箱方式初始化Integer时，若初始值是在缓存范围内，则会引用缓存范围内的对象。从上源码注释可以看出，Integer可以通过在启动jvm时添加<code>-XX:AutoBoxCacheMax=&lt;size&gt;</code>设置其缓存大小，但其它基本类型是没有相应的设置方式的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Integer a &#x3D; 5;</span><br><span class="line">Integer b &#x3D; 5;</span><br><span class="line">System.out.println(a&#x3D;&#x3D;b); &#x2F;&#x2F;true</span><br><span class="line">b &#x3D; new Integer(5); &#x2F;&#x2F; 为5分配了新的空间，所以与缓存5的空间地址不同</span><br><span class="line">System.out.println(a&#x3D;&#x3D;b); &#x2F;&#x2F;false</span><br><span class="line">a &#x3D; 255;</span><br><span class="line">b &#x3D; 255;</span><br><span class="line">System.out.println(a&#x3D;&#x3D;b); &#x2F;&#x2F;false</span><br></pre></td></tr></table></figure><p>各基本类型对应包装类型的缓存池值(Double、Float没有缓存)如下：</p><ul><li>Boolean: 通过字段缓存true，false</li><li>Byte：内部类ByteCache缓存所有字节(-127-128)</li><li>Short：内部类ShortCache缓存-127-128</li><li>Integer：内部类IntegerCache缓存-127-128</li><li>Long：内部类LongCache缓存-127-128</li><li>Character:内部类CharacterCache缓存0~127对应的ASCII码字符值</li></ul><p><strong>运算小题目</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char a &#x3D; &#39;a&#39;; &#x2F;&#x2F; &#39;a&#39;的ASCII码为97</span><br><span class="line">int b &#x3D; 13;</span><br><span class="line">long e &#x3D; a + d;</span><br></pre></td></tr></table></figure><p>那么问题来了，e是多少呢？运算过程中类型是怎么转换的呢？请务必让我根据下图一一讲解：<br><img src="https://knowledge-pictures.oss-cn-beijing.aliyuncs.com/hexo-blog/Java%E5%9F%BA%E7%A1%80/%E5%AD%97%E8%8A%82%E7%A0%81.png" alt="%E5%AD%97%E8%8A%82%E7%A0%81.png"><br>(上图为在类编译结果目录target/pagkage执行javap -verbose Test显示的字节码)</p><ol><li>bipush将a转换为int值(‘a’对应的ASCII码值)入栈,istore_1取出栈顶int值(即a值)保存到局部变量1中</li><li>bipush将b(b本身为int，无需转换)入栈,istore_2取出栈顶int值(即b值)保存到局部变量2中</li><li>iload_1、iload_2将局部变量1、2的int类型值入栈,iadd将栈顶的2个int值相加，并将结果压栈,i2l将int转long(不是i2十一哦)，然后lstore_3将栈顶long值保存到局部变量3中</li></ol><h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><hr><p>java的引用类型只有三种，分别是<strong>类(class)</strong>、<strong>接口(interface)</strong>、<strong>数组</strong>。当某一引用数据内容在其中一个作用域被改变时，其它作用域中该引用数据内容也会发生改变。<br>JVM内存区域主要为堆和栈，栈可以说是方法执行的内存模型，当在方法里定义一个变量时，栈就会为该变量分配内存空间，当超出变量的作用域时，其分配的栈空间就会被释放。栈的存取速度比堆要快，仅次于寄存器，但存在栈中的数据大小与生存期必须是确定的，故Java的8种基本数据类型和对象引用变量都是存放在栈中(设想下若对象存放到栈中，那么传对象参数时每传递到一个方法就会导致上一个方法对对象的回收，导致含一定大小的内存回收频繁降低程序性能，故使用堆存放对象)。<br>堆是所有的对象实例以及数组分配内存的运行时数据区域，即使对象已经没有在任何地方被引用了占用的空间也不会马上被释放，而是等到触发某些条件(如手动调用System.gc()、新生代空间不足、老年代空间不足等)才会被回收器回收。</p><p>引用测试例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] array &#x3D; new int[]&#123;1, 2, 3&#125;;</span><br><span class="line">        changeArray(array);</span><br><span class="line">        System.out.println(array[0]); &#x2F;&#x2F; 输出：11</span><br><span class="line">        Integer integer &#x3D; new Integer(5);</span><br><span class="line">        changeInteger(integer);</span><br><span class="line">        System.out.println(integer); &#x2F;&#x2F; 输出：5</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void changeArray(int[] array) &#123;</span><br><span class="line">        array[0] &#x3D; 11;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void changeInteger(Integer integer) &#123;</span><br><span class="line">        integer &#x3D; 10; &#x2F;&#x2F; integer &#x3D; Integer.valueOf(10);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void changeStr(String str) &#123;</span><br><span class="line">        str &#x3D; &quot;xxx&quot;; &#x2F;&#x2F; str &#x3D; String.valueOf(&quot;xxx&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><hr><h3 id="final：常量关键字"><a href="#final：常量关键字" class="headerlink" title="final：常量关键字"></a>final：常量关键字</h3><ul><li>数据：声明数据为常量，可以是编译时常量，也可以是在运行被初始化后不能被改变的常量。<ul><li>对于基本类型，final使数值不变<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">final a &#x3D; 1;</span><br><span class="line">a &#x3D; 2; &#x2F;&#x2F; cannot assign value to final variable &#39;a&#39;</span><br></pre></td></tr></table></figure></li><li>对于引用类型，final使引用不变，即不能引用其它对象，但是被引用的对象本身内容是可以被修改的。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">final String str &#x3D; &quot;b&quot;;</span><br><span class="line">str &#x3D; &quot;c&quot;; &#x2F;&#x2F; cannot assign value to final variable &#39;str&#39;</span><br></pre></td></tr></table></figure></li></ul></li><li>方法：声明方法不能被子类重写，private方法隐式地被指定为final。</li><li>类：声明类不允许被继承。</li></ul><h3 id="static：静态关键字"><a href="#static：静态关键字" class="headerlink" title="static：静态关键字"></a>static：静态关键字</h3><h4 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h4><p>又称类变量，表示变量属于类(Class对象)的。静态变量在内存中只存在一份，在类的所有实例对象都共享静态变量，可以直接通过类名来访问它，静态变量在内存中只存在一份。</p><ul><li>实例变量：实例对象内非static标识的的属性变量。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class A &#123;</span><br><span class="line"></span><br><span class="line">    private int x;         &#x2F;&#x2F; 实例变量</span><br><span class="line">    private static int y;  &#x2F;&#x2F; 静态变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><p>静态方法在类加载阶段初始化，不依赖于任何实例对象，所以静态方法不能是抽象方法，也不能通过this调用静态方法。</p><h4 id="标识代码块：静态语句块"><a href="#标识代码块：静态语句块" class="headerlink" title="标识代码块：静态语句块"></a>标识代码块：静态语句块</h4><p>静态语句块只会在类(Class)初始化时运行一次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class A &#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(&quot;123&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        A a1 &#x3D; new A();</span><br><span class="line">        A a2 &#x3D; new A();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>非静态内部类依赖于外部类的实例，即需先创建外部类实例，才能用这个实例去创建非静态内部类，而静态内部类不需创建外部类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class OuterClass &#123;</span><br><span class="line"></span><br><span class="line">    class InnerClass&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        OuterClass outerClass &#x3D; new OuterClass();</span><br><span class="line">        &#x2F;&#x2F; InnerClass innerClass &#x3D; new InnerClass(); &#x2F;&#x2F; cannot be referenced  from a static context</span><br><span class="line">        InnerClass ic &#x3D; outerClass.new InnerClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类初始化顺序"><a href="#类初始化顺序" class="headerlink" title="类初始化顺序"></a>类初始化顺序</h4><ol><li>父类静态变量-&gt;静态代码块</li><li>子类静态变量-&gt;静态代码块</li><li>父类实例变量-&gt;普通代码块-&gt;父类构造函数</li><li>子类实例变量-&gt;子类代码块-&gt;子类构造函数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class SingleTon &#123;</span><br><span class="line">    public static int count1;  &#x2F;&#x2F; 连接-准备阶段-1.1 count1 &#x3D; 0</span><br><span class="line">    public static int count2 &#x3D; 1; &#x2F;&#x2F; 连接-准备阶段-1.2 count2 &#x3D; 1</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        &#x2F;&#x2F; 1.4 连接-准备阶段 count1 &#x3D; 2</span><br><span class="line">        System.out.println(&quot;static block count2:&quot; + count2); &#x2F;&#x2F; 1.4 count2&#x3D;2</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private SingleTon() &#123;</span><br><span class="line">        &#x2F;&#x2F; 1.3.1 连接-准备阶段 count1 &#x3D; 1</span><br><span class="line">        count1++;</span><br><span class="line">        &#x2F;&#x2F; 1.3.2 连接-准备阶段 count1 &#x3D; 2</span><br><span class="line">        count2++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(count1);</span><br><span class="line">        System.out.println(count2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><hr><p>Object是所有类(包括数组)的基类，是唯一没有父类的类。<br><img src="http://www.plantuml.com/plantuml/png/bOz1JeL038RtSuecRY1w1ACO3k324nGeK5BQo7GmQhox0HmNnZpoTas_R_v_MaN7nTCieHMC4PwRYLg7pm00S0EApYlbRIkcL9J_ifuLXJyolZqMK6-fzuyFC93lyozlp8HGWLuJIYn-OgoPil3Y2-i0RiUG7-PULeSHurXRzwSq6wjn1shE_Vkfy2HomNb3zZCijdsMPxBaLwXt-o6AQh4CNw4YxT8itm00" alt="bOz1JeL038RtSuecRY1w1ACO3k324nGeK5BQo7GmQhox0HmNnZpoTas_R_v_MaN7nTCieHMC4PwRYLg7pm00S0EApYlbRIkcL9J_ifuLXJyolZqMK6-fzuyFC93lyozlp8HGWLuJIYn-OgoPil3Y2-i0RiUG7-PULeSHurXRzwSq6wjn1shE_Vkfy2HomNb3zZCijdsMPxBaLwXt-o6AQh4CNw4YxT8itm00"></p><h3 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h3><p>作用域是protected，若不重写该方法并声明为public则非类作用域中的对象则无法调用该方法。Cloneable接口只规定如果类没有实现该接口又调用了clone()，就会抛出CloneNotSupportedException。</p><ul><li>浅拷贝:拷贝对象和原始对象的引用类型引用同一个对象。</li><li>深拷贝：拷贝对象和原始对象的引用类型引用不同对象。</li></ul><h3 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h3><p>返回对象的哈希值，equals()返回true则两个对象hashCode一定相同，但hashCode相同的两个对象不一定equals。AbstractList、AbstractSet和HashMap.Node等集合类使用了<code>hashCode()</code>方法来计算对象的存储位置，因此要将对象添加到这些集合类中，需要让对应的类实现 <code>hashCode()</code> 方法。hashCode的特点如下：</p><ul><li>hashCode是用来在散列存储结构中确定对象的存储地址(如集合中的HashMap、AbstractList及子类、AbstractSet及子类)</li><li>如果两个对象equals()返回true，则这两个对象的hashCode必须要相同</li><li>如果重写了类的equals()方法，hashCode()方法也必须要重写</li><li>两个对象的hashCode相同不代表两个对象相同，只能说明这两个对象在散列存储结构中<blockquote><p>散列存储:又称hash存储，是一种将数据元素的存储位置与关键码之间建立确定对应关系的查找技术。<br>综上，hashCode是用于查找使用的，而equals是用于比较两个对象的是否相等的。以<code>HashMap.get(Object key)</code>调用的<code>getNode(int hash, Object key)</code>为例：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">final Node&lt;K,V&gt; getNode(int hash, Object key) &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;</span><br><span class="line">    &#x2F;&#x2F; 1.判断Node数组table是否为空并数组长度大于0，且通过hashCode获取的数组下标位置元素不为空</span><br><span class="line">    if ((tab &#x3D; table) !&#x3D; null &amp;&amp; (n &#x3D; tab.length) &gt; 0 &amp;&amp;</span><br><span class="line">        (first &#x3D; tab[(n - 1) &amp; hash]) !&#x3D; null) &#123;</span><br><span class="line">        &#x2F;&#x2F; 2. A：判断hash获取的下标位置起的第一个Node元素hash值是否与参数的hash值相同、Node.key是否与Node参数key地址相同，B:或Node.key是否与参数key内容相同且参数key不为空，满足A或B其中一个条件则返回hash获取的下标位置起的第一个元素</span><br><span class="line">        if (first.hash &#x3D;&#x3D; hash &amp;&amp; &#x2F;&#x2F; always check first node</span><br><span class="line">            ((k &#x3D; first.key) &#x3D;&#x3D; key || (key !&#x3D; null &amp;&amp; key.equals(k))))</span><br><span class="line">            return first;</span><br><span class="line">        &#x2F;&#x2F; 如果hash获取指定下标的第一个Node并非所需要的Node，则根据Node元素的实例是否为TreeNode来确定查找方式</span><br><span class="line">        if ((e &#x3D; first.next) !&#x3D; null) &#123;</span><br><span class="line">                &#x2F;&#x2F; TreeNode查找方式获取指定key元素Node</span><br><span class="line">            if (first instanceof TreeNode)</span><br><span class="line">                return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            do &#123;</span><br><span class="line">                &#x2F;&#x2F; 链表方式查找指定key元素Node</span><br><span class="line">                if (e.hash &#x3D;&#x3D; hash &amp;&amp;</span><br><span class="line">                    ((k &#x3D; e.key) &#x3D;&#x3D; key || (key !&#x3D; null &amp;&amp; key.equals(k))))</span><br><span class="line">                    return e;</span><br><span class="line">            &#125; while ((e &#x3D; e.next) !&#x3D; null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>HashMap通过hashCode确认了查找对象的大概位置，再根据hashCode与key确定对象的实际位置。可以理解为HashMap根据hashCode划分成一个个桶，每个桶里含相同hashCode的对象，通过hashCode确认对象的大概位置后，再通过等值判断(<code>==</code>或<code>equals()</code>)获取所需元素Node，所以集合类的对象都要主要重写hashCode方法。</li></ul><h3 id="equals-判断两个对象是否具有等价关系"><a href="#equals-判断两个对象是否具有等价关系" class="headerlink" title="equals():判断两个对象是否具有等价关系"></a>equals():判断两个对象是否具有等价关系</h3><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><hr><p>String被声明为final，因此是不可被继承的(Integer 等包装类也不能被继承）。在 Java 8 中，String 内部使用<code>char</code>数组存储数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private final char value[];</span><br></pre></td></tr></table></figure><p><code>value[]</code>被声明为 final，意味着<code>value[]</code>初始化之后就不能再引用其它数组。并且 String 内部没有改变<code>value[]</code>的方法，因此可以保证String不可变。不可变的特性可以使得 hash 值也不可变，使String十分适合作为集合类(如HashMap、HashSet)的哈希运算。<br>String有以下两种赋值方式</p><ul><li>字面量赋值(“Hello”字符串存到常量池中):<code>String str = &quot;Hello&quot;;</code></li><li><code>new</code>创建新对象()：<code>String str = new String(&quot;Hello&quot;);</code>,new方式会在编译时期在String Pool中创建一个字符串对象指向字面量”Hello”(即字符串引用),在运行时会在堆中创建一个字符串对象，该字符串对象intern()返回该字符串字面量的引用。<br>字符串常量池（String Pool）保存着所有字符串常量，这些字面量在编译时期就确定，也可以使用 String的<code>intern()</code>方法在运行过程将字符串添加到String Pool中。在 Java 7 之前，String Pool 被放在运行时常量池中，它属于永久代。而在 Java 7，String Pool 被移到堆中，字符串常量池中存放的是字符串的引用。<br>如下例，通过字面量赋值时，加载阶段会在堆区中创建一个字符串对象”Hello”，同时在字符串池(String Pool)中存放一个它的引用，当赋值变量str时，虚拟机会去字符串池中查找是否含equals(“Hello”)的字符串，如为true则返回字符串池中的引用，如果找不到equals的字符串，就会在堆中新建一个对象，同时把引用驻留在字符串池，再把引用赋给str。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String str &#x3D; &quot;Hello&quot;;</span><br><span class="line">        String str2 &#x3D; “Hello”;</span><br><span class="line">        String str3 &#x3D; new String(&quot;Hello&quot;);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://knowledge-pictures.oss-cn-beijing.aliyuncs.com/hexo-blog/Java%E5%9F%BA%E7%A1%80/String.png" alt="String.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">String s1 &#x3D; &quot;Hello&quot;;</span><br><span class="line">String s2 &#x3D; &quot;Hello&quot;;</span><br><span class="line">String s3 &#x3D; &quot;Hel&quot; + &quot;lo&quot;;</span><br><span class="line">String s4 &#x3D; &quot;Hel&quot; + new String(&quot;lo&quot;);</span><br><span class="line">String s5 &#x3D; new String(&quot;Hello&quot;);</span><br><span class="line">String s6 &#x3D; s5.intern();</span><br><span class="line">String s7 &#x3D; &quot;H&quot;;</span><br><span class="line">String s8 &#x3D; &quot;ello&quot;;</span><br><span class="line">String s9 &#x3D; s7 + s8;</span><br><span class="line">          </span><br><span class="line">System.out.println(s1 &#x3D;&#x3D; s2);  &#x2F;&#x2F; true</span><br><span class="line">System.out.println(s1 &#x3D;&#x3D; s3);  &#x2F;&#x2F; true   参与拼接的部分都是字面量，编译器会进行优化，在编译时s3就变成“Hello”了</span><br><span class="line">System.out.println(s1 &#x3D;&#x3D; s4);  &#x2F;&#x2F; false  &quot;lo&quot;通过new创建，所以无法在编译期知道它的地址，所以编译器无法进行优化</span><br><span class="line">System.out.println(s1 &#x3D;&#x3D; s9);  &#x2F;&#x2F; false  s9由两个变量拼接，编译期无法知道变量的具体地址</span><br><span class="line">System.out.println(s4 &#x3D;&#x3D; s5);  &#x2F;&#x2F; false   s5是new出来的，在堆中的地址肯定和s4不同</span><br><span class="line">System.out.println(s1 &#x3D;&#x3D; s6);  &#x2F;&#x2F; true    s6是s5字符串值&quot;Hello&quot;在常量池的引用，该引用与s1都指向同一个&quot;Hello&quot;对象，所以true</span><br></pre></td></tr></table></figure><ul><li>intern():如果字符串常量池中已经含与当前对象equals(object)为true的字符串，则返回池中的字符串引用；否则将当前String对象添加到字符串常量池中，并返回对当前String对象的引用。</li></ul><h3 id="String-StringBuffer和StringBuilder"><a href="#String-StringBuffer和StringBuilder" class="headerlink" title="String, StringBuffer和StringBuilder"></a>String, StringBuffer和StringBuilder</h3><ul><li>String、StringBuffer和StringBuilder都是通过char数组存储数据，不过StringBuffer和StringBuilder的char数组可变的，没有被final修饰</li><li>StringBuffer线程不安全，String由于其不可变所以是线程安全的，StringBuffer的方法都使用了synchronized同步所以是线程安全的</li><li>String相加编译为字节码后都会新建StringBuilder来进行字符串拼接</li></ul><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><hr><p>编译器在编译期间将类文件编译为字节码.class文件，在类运行的加载步骤中的加载阶段会根据<code>.class</code>文件生成对应的Class对象并存放到堆中，而字节流的静态存储结构则转化为方法区的运行时数据结构(存储如类的字段、方法等信息)。<br>反射可以提供运行时的类信息，并且这个类可以在运行时才加载进来，甚至在编译时期该类的<code>.class</code>不存在也可以加载进来。java反射相关类主要都在包java.lang.reflect下，反射相关常用类如下：</p><ul><li>Class：Class对象代表运行的Java应用中的类和接口(枚举enum是一种类,注解annotation是一种接口)，可以通过Class对象获取类和接口的信息(如类名、所在包、属性、方法、注解等)</li><li>Field：提供有关类或接口的单个字段及对它们动态访问的信息(注解、类型)，可通过Class对象获取</li><li>Method：提供有关类或接口上的单个方法的信息(参数、注解)，以及对单个方法的访问调用。反射获取的方法可以是类方法或实例的方法，调用<code>invoke()</code>方法调用。</li><li>Constructor:提供类的构造函数信息(参数、注解)，并提供对此类的访问，通过调用该对象的<code>newInstance()</code>可以创建声明类的实例。</li><li>Parameter：提供方法参数的信息(类型、注解)，可通过Method、Constructor对象获取。</li></ul><p>虽然反射的功能很强大，但也不该滥用，反射的缺点如下：</p><ul><li>增加性能开销：反射涉及了动态类型的解析，JVM无法对这些代码进行优化，因此反射效率比直接操作的效率是慢很多的</li><li>安全性降低：由于反射可以执行一些正常情况下不被允许的操作(如访问私有属性和方法)，破坏了封装性</li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><hr><p>Throwable 是所有异常类的基类，java根据异常是否虚拟机异常将异常分为Error与Exception，Throwable的一级子类只有Error与Exception。</p><ul><li>Error：合理的应用程序不应尝试捕获的严重问题，一般是虚拟机的异常，如栈溢出(StackOverFlowError)、内存溢出(OutOfMemoryError)</li><li>Exception：合理的应用程序可能需要捕获的异常，常见的Exception子类有SQLException、RuntimeException、IOException等<br><a href="http://www.plantuml.com/plantuml/uml/XOvDQe0m48Ntdi8BU8Ckx491gAO_fNGRuwXf9vaodLGBFNnB8mO4SHCUx_ioC-MdQ9RWC5Fz6nZ9RtwA8d-UcHRT8-JP7YEfc8cp_pSMB_RlkyPMczbwYFZG9Vb9j7bNNy0ZqbAj1Zx4aZ_tLH0rjk28lvDzk2Y1FMtB7kvEsMFmOXsSyaObjEK4QulGaTGK_92quyZeTW7ndgmNu2krGOH9uorFmO6NA_rrNPDIWX-2mry0" target="_blank" rel="noopener">PlantUML Web Server</a><br>Exception异常有两种处理方式：</li><li>捕获处理：<code>try{} catch{}</code>捕捉处理且不抛出<code>throw</code>使程序正常运行</li><li>抛出异常：通过<code>throw/throws</code>抛出异常将结束当前程序代码块的运行将异常抛给上游(方法调用方)，由上游进行处理，常见的业务异常可以通过Spring Boot的<code>@ControllerAdvice</code>定义全局异常拦截器</li></ul><h2 id="注解-Annotation"><a href="#注解-Annotation" class="headerlink" title="注解-Annotation"></a>注解-Annotation</h2><hr><p>Annontation是JDK5引入的特性，用于将一些信息或元数据标注到程序元素（类、方法、成员变量、参数等），可以理解成程序元素的标签。注解标注的元数据可用于编译、类加载、运行时使用，元素的注解相关类都包含在<code>java.lang.annotation</code>包中。<br>注解本质是一个继承了 <code>java.lang.annotation.Annotation</code> 的特殊接口(注解即接口)，其具体实现类是Java 运行时生成的动态代理类。通过反射获取注解时，返回的是Java 运行时生成的动态代理对象$Proxy1。通过代理对象调用自定义注解（接口）的方法，最终会调用 <code>AnnotationInvocationHandler</code> 的invoke 方法，该方法会从memberValues 这个Map 中索引出对应的值，而memberValues 的来源是Java 常量池。</p><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p><code>java.lang.annotation</code>提供了四种元注解，用于注解其他的注解(常用于自定义注解)：</p><ul><li><p>@Documented：注解是否将包含在JavaDoc中</p></li><li><p>@Retention：注解的保留时间，默认保留策略为<code>RetentionPolicy.CLASS</code>，注释可选的保留策略<code>RetentionPolicy</code>如下：</p><ul><li><code>SOURCE</code>：注解只在源文件中.java保留，编译后丢失(即编译后的.class文件将不包含注解)</li><li><code>CLASS</code>：注解保留到编译文件，但VM不会在运行时保留这些注解</li><li><code>RUNTIME</code>：注解由VM保留到程序运行期间，因此程序运行时可以通过反射获取这些注解信息</li></ul></li><li><p>@Target：声明注解适用的范围，参数为<code>ElementType</code>注解范围枚举数组，<code>ElementType</code>常用枚举如下：</p><ul><li><code>TYPE</code>：类，接口（包括注解）或枚举</li><li><code>FIELD</code>：字段</li><li><code>METHOD</code>：方法</li><li><code>PARAMETER</code>：参数</li><li><code>CONSTRUCTOR</code>：构造函数</li><li><code>LOCAL_VARIABLE</code>：本地变量</li><li><code>ANNOTATION_TYPE</code>：注解</li><li><code>PACKAGE</code>：包</li></ul></li><li><p>@Inherited：声明注解是可继承的，如A类被可继承的注解B标注了，AA集成了A，则B注解也对A有效</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;面向对象编程的三大特性&quot;&gt;&lt;a href=&quot;#面向对象编程的三大特性&quot; class=&quot;headerlink&quot; title=&quot;面向对象编程的三大特性&quot;&gt;&lt;/a&gt;面向对象编程的三大特性&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;封装&quot;&gt;&lt;a href=&quot;#封装&quot; class=
      
    
    </summary>
    
    
      <category term="Java" scheme="https://wilson-he.gitee.io/categories/Java/"/>
    
    
      <category term="Java基础" scheme="https://wilson-he.gitee.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>UML</title>
    <link href="https://wilson-he.gitee.io/UML/"/>
    <id>https://wilson-he.gitee.io/UML/</id>
    <published>2020-04-20T07:27:02.344Z</published>
    <updated>2020-04-20T07:27:02.345Z</updated>
    
    <content type="html"><![CDATA[<p>Object</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">class Object &#123;</span><br><span class="line">    # native Object clone()</span><br><span class="line">    # native Object finalize()</span><br><span class="line">    + final Class&lt;?&gt; getClass()</span><br><span class="line">    + boolean equals(Object obj)</span><br><span class="line">    + String toString()</span><br><span class="line">    + native int hashCode()</span><br><span class="line">    + final native void notify()</span><br><span class="line">    + final native void notifyAll()</span><br><span class="line">    + final native void wait()</span><br><span class="line">    + final native void wait(long timeout)</span><br><span class="line">    + final native void wait(long timeout, int nanos)</span><br><span class="line">&#125;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p>Exception:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Object &lt;|-- Throwable </span><br><span class="line">Throwable &lt;|-- Error</span><br><span class="line">Error &lt;|-- VirtualMachineError</span><br><span class="line">VirtualMachineError &lt;|-- StackOverflowException</span><br><span class="line">VirtualMachineError &lt;|-- OutOfMemoryException</span><br><span class="line">Throwable &lt;|-- Exception</span><br><span class="line">Exception &lt;|-- RuntimeException</span><br><span class="line">Exception &lt;|-- IOException</span><br><span class="line">IOException &lt;|-- FileNotFoundException</span><br><span class="line">RuntimeException &lt;|-- IOException</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p>ArrayList:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">interface List&#123;&#125;</span><br><span class="line">interface RandomAccess&#123;&#125;</span><br><span class="line">interface Cloneable&#123;&#125;</span><br><span class="line">interface Collection&#123;&#125;</span><br><span class="line">interface Serializable&#123;&#125;</span><br><span class="line">class AbstractCollection&#123;&#125;</span><br><span class="line">class AbstractList&#123;</span><br><span class="line">    # transient int modCount</span><br><span class="line">&#125;</span><br><span class="line">class ArrayList&#123;</span><br><span class="line">    - static final int DEFAULT_CAPACITY</span><br><span class="line">    - static final Object[] EMPTY_ELEMENTDATA</span><br><span class="line">    - static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><br><span class="line">    - static final int MAX_ARRAY_SIZE</span><br><span class="line">    - int size</span><br><span class="line">    # transient Object[] elementData</span><br><span class="line">    + boolean add(E e)</span><br><span class="line">    + boolean addAll(Collection&lt;? extends E&gt; c)</span><br><span class="line">    + boolean remove(E e)</span><br><span class="line">    + boolean remove(int index)</span><br><span class="line">    + E get(int index)</span><br><span class="line">    + int indexOf(Object o)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Collection &lt;|.. AbstractCollection</span><br><span class="line">AbstractCollection &lt;|-- AbstractList</span><br><span class="line">List &lt;|.. ArrayList</span><br><span class="line">List &lt;|.. AbstractList</span><br><span class="line">RandomAccess &lt;|..ArrayList</span><br><span class="line">AbstractList &lt;|.. ArrayList</span><br><span class="line">Cloneable &lt;|.. ArrayList</span><br><span class="line">Serializable &lt;|.. ArrayList</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p>LinkedList:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">interface List&#123;&#125;</span><br><span class="line">interface Cloneable&#123;&#125;</span><br><span class="line">interface Serializable&#123;&#125;</span><br><span class="line">class Node&#123;</span><br><span class="line">  E item</span><br><span class="line">  Node&lt;E&gt; next</span><br><span class="line">  Node&lt;E&gt; prev</span><br><span class="line">&#125;</span><br><span class="line">interface Deque&#123;</span><br><span class="line">  void addFirst(E e)</span><br><span class="line">  void addLast(E e)</span><br><span class="line">  E removeFirst()</span><br><span class="line">  E removeLast()</span><br><span class="line">  ...()</span><br><span class="line">&#125;</span><br><span class="line">interface Queue&#123;&#125;</span><br><span class="line">interface Collection&#123;&#125;</span><br><span class="line">Queue &lt;|-- Deque</span><br><span class="line">Collection &lt;|-- Queue</span><br><span class="line">class LinkedList&#123;</span><br><span class="line">    - transient int size</span><br><span class="line">    - transient Node&lt;E&gt; first</span><br><span class="line">    - transient Node&lt;E&gt; last</span><br><span class="line">    + boolean add(E e)</span><br><span class="line">    + boolean addAll(Collection&lt;? extends E&gt; c)</span><br><span class="line">    + boolean remove(E e)</span><br><span class="line">    + boolean remove(int index)</span><br><span class="line">    + E get(int index)</span><br><span class="line">    + int indexOf(Object o)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Deque &lt;|.. LinkedList</span><br><span class="line">Collection &lt;|-- List</span><br><span class="line">List &lt;|.. LinkedList</span><br><span class="line">AbstractSequentialList &lt;|-- LinkedList</span><br><span class="line">AbstractList &lt;|-- AbstractSequentialList </span><br><span class="line">AbstractCollection&lt;|-- AbstractList</span><br><span class="line">List &lt;|.. AbstractCollection</span><br><span class="line">Cloneable &lt;|.. LinkedList</span><br><span class="line">Serializable &lt;|.. LinkedList</span><br><span class="line">LinkedList +-- Node</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Object&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Markdown语法大全</title>
    <link href="https://wilson-he.gitee.io/Markdown/"/>
    <id>https://wilson-he.gitee.io/Markdown/</id>
    <published>2020-04-20T07:27:02.254Z</published>
    <updated>2020-04-20T07:27:02.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown基础语法"><a href="#Markdown基础语法" class="headerlink" title="Markdown基础语法"></a>Markdown基础语法</h1><p>#标识1-6级标题  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><p>换行：段落末尾添加两个或以上空格<br><em>字体样式</em>：</p><ul><li>斜体：<code>_斜体_</code>或<code>*斜体*</code></li><li>粗体：<code>__加粗__</code>或<code>**加粗**</code></li><li>斜体加粗：<code>***斜体加粗***</code>或<code>___斜体加粗___</code>  </li><li>删除线： <code>~~删除线~~</code></li><li>下划线： <code>&lt;u&gt;下划线&lt;/u&gt;</code></li><li>脚注：  <code>文本[^脚注名]</code><br>列表(3种语法)：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">* 元素1</span><br><span class="line">* 元素2</span><br><span class="line"> </span><br><span class="line">- 元素1</span><br><span class="line">- 元素2</span><br><span class="line"> </span><br><span class="line">+ 元素1</span><br><span class="line">+ 元素2</span><br><span class="line"></span><br><span class="line">多级列表：</span><br><span class="line">- 一级列表1</span><br><span class="line">  - 二级列表1.1  </span><br><span class="line">    这里是二级列表  </span><br><span class="line">    - 三级列表1.1.1  </span><br><span class="line">    这里是三级列表</span><br><span class="line">  - 二级列表1.2</span><br></pre></td></tr></table></figure></li></ul><p>分割线：<code>---</code>、<code>- - -</code>、<code>&lt;hr&gt;</code>、<code>***</code>、<code>* * *</code><br>区块：<code>&gt; 文本内容</code>,区块可以有多级，根据 <code>&gt;</code> 个数确认级数，可以与列表语法互相嵌套，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">列表嵌套区块：</span><br><span class="line">- 元素1</span><br><span class="line">  &gt; 一级区块</span><br><span class="line">  &gt;&gt; 二级区块</span><br><span class="line">  - 元素1.1</span><br><span class="line">- 元素2</span><br><span class="line">  - 元素2.1</span><br><span class="line">  &gt; 一级区块</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line"></span><br><span class="line">代码块(纯文本,&#96;&#96;&#96;后可选择语言,如java、javascript)： </span><br><span class="line">&lt;pre&gt;</span><br></pre></td></tr></table></figure><p>// code or text</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;pre&gt;</span><br><span class="line">或</span><br></pre></td></tr></table></figure><pre>code or text</pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">超链接： &#96;[个人blog](http:&#x2F;&#x2F;wilson-he.gitee.io&#x2F;)&#96;  </span><br><span class="line">插入图片：&#96;![description](url)&#96;,也可使用img标签&#96;&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;www.editplus.com&#x2F;ss&#x2F;editplus680x340.png&quot; width&#x3D;&quot;50%&quot; height&#x3D;&quot;30%&quot;&#x2F;&gt;&#96;  </span><br><span class="line">表格：</span><br></pre></td></tr></table></figure><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td></td></tr><tr><td>单元格</td><td>单元格</td></tr><tr><td>```</td><td></td></tr><tr><td>`</td><td></td></tr><tr><td>内容缩略：</td><td></td></tr><tr><td><details></td><td></td></tr><tr><td><summary>概况</summary></td><td></td></tr><tr><td>详细内容</td><td></td></tr><tr><td></details></td><td></td></tr></tbody></table><table>    <caption>标题</caption>    <tr>        <td>1</td>        <td>2</td>    </tr>    <tr>        <td>11</td>        <td>22</td>    </tr>    <tr>        <td>111</td>    </tr></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Markdown基础语法&quot;&gt;&lt;a href=&quot;#Markdown基础语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown基础语法&quot;&gt;&lt;/a&gt;Markdown基础语法&lt;/h1&gt;&lt;p&gt;#标识1-6级标题  &lt;/p&gt;
&lt;figure class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring面试题集</title>
    <link href="https://wilson-he.gitee.io/Spring%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%86/"/>
    <id>https://wilson-he.gitee.io/Spring%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%86/</id>
    <published>2020-04-20T07:27:02.228Z</published>
    <updated>2020-04-20T07:27:02.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring的事务隔离级别"><a href="#Spring的事务隔离级别" class="headerlink" title="Spring的事务隔离级别"></a>Spring的事务隔离级别</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring的事务隔离级别&quot;&gt;&lt;a href=&quot;#Spring的事务隔离级别&quot; class=&quot;headerlink&quot; title=&quot;Spring的事务隔离级别&quot;&gt;&lt;/a&gt;Spring的事务隔离级别&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://wilson-he.gitee.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>RocketMQ概念模型</title>
    <link href="https://wilson-he.gitee.io/RocketMQ%E6%A6%82%E5%BF%B5%E6%A8%A1%E5%9E%8B/"/>
    <id>https://wilson-he.gitee.io/RocketMQ%E6%A6%82%E5%BF%B5%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-04-20T07:27:02.206Z</published>
    <updated>2020-04-20T07:27:02.207Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h5 id="RocketMQ主要由-Producer、Broker、Consumer、NameServer四部分组成"><a href="#RocketMQ主要由-Producer、Broker、Consumer、NameServer四部分组成" class="headerlink" title="RocketMQ主要由 Producer、Broker、Consumer、NameServer四部分组成"></a>RocketMQ主要由 Producer、Broker、Consumer、NameServer四部分组成</h5><ul><li>Producer 生产消息</li><li>Consumer 从Broker读取消费消息</li><li>Broker 存储Producer发送过来的消息</li><li>NameServer 为Producer或Consumer路由消息到Broker<br>Broker 在实际部署过程中对应一台服务器，每个 Broker 可以存储多个Topic的消息，每个Topic的消息也可以分片存储于不同的 Broker。Message Queue 用于存储消息的物理地址，每个Topic中的消息地址存储于多个 Message Queue 中。ConsumerGroup 由多个Consumer 实例构成。RocketMQ启动顺序为先NameServer，再Broker。</li></ul></blockquote><p><img src="https://knowledge-pictures.oss-cn-beijing.aliyuncs.com/RocketMQ/Model.png" alt="Model.png"></p><ul><li><h3 id="Topic与Queue"><a href="#Topic与Queue" class="headerlink" title="Topic与Queue"></a>Topic与Queue</h3><p>Topic是一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是RocketMQ进行消息订阅的基本单位。<br>在RocketMQ中Queue是组成Topic的更小单元，集群消费模式下一个消费者只消费该Topic中部分Queue中的消息，当一个消费者开启广播模式时则会消费该Topic下所有Queue中的消息。</p></li><li><h3 id="Broker-Server-代理服务器"><a href="#Broker-Server-代理服务器" class="headerlink" title="Broker Server(代理服务器)"></a>Broker Server(代理服务器)</h3><p>消息中转角色，负责存储消息、转发消息。代理服务器在RocketMQ系统中负责接收从生产者发送来的消息并存储、同时为消费者的拉取请求作准备。代理服务器也存储消息相关的元数据，包括消费者组、消费进度偏移(offset)和主题(Topic)和队列消息等。</p></li><li><h3 id="Name-Server-名字服务"><a href="#Name-Server-名字服务" class="headerlink" title="Name Server(名字服务)"></a>Name Server(名字服务)</h3><p>名称服务充当路由消息的提供者。生产者或消费者能够通过名字服务查找各主题相应的Broker IP列表。多个Namesrv实例组成集群，但相互独立，没有信息交换。</p></li><li><h3 id="Producer-Group-生产者组"><a href="#Producer-Group-生产者组" class="headerlink" title="Producer Group(生产者组)"></a>Producer Group(生产者组)</h3><p>同一类Producer的集合，这类Producer发送同一类消息且发送逻辑一致。如果发送的是事物消息且原始生产者在发送之后崩溃，则Broker服务器会联系同一生产者组的其他生产者实例以提交或回溯消费。</p></li><li><h3 id="Consumer-Group-消费者组"><a href="#Consumer-Group-消费者组" class="headerlink" title="Consumer Group(消费者组)"></a>Consumer Group(消费者组)</h3><p>同一类Consumer的集合，这类Consumer通常消费同一类消息且消费逻辑一致。消费者组使得在消息消费方面，实现负载均衡和容错的目标变得非常容易。要注意的是，消费者组的消费者实例必须订阅完全相同的Topic。RocketMQ 支持两种消息模式：<em>集群消费（Clustering）</em> 和<em>广播消费（Broadcasting）</em>。</p></li><li><h3 id="Offset-Message-Queue下的offset"><a href="#Offset-Message-Queue下的offset" class="headerlink" title="Offset(Message Queue下的offset)"></a>Offset(Message Queue下的offset)</h3><ul><li>max offset<br>MessageQueue中的max offset在源码中表示指消息的最大offset+1，即下条消息入队的位置。</li><li>min offset<br>标识当前队列的最小offset。由于消息存储一段时间后，消费了的消息会从从磁盘物理删除，message queue的min offset也就对应增长，即比minOffset小的消息不存在broker上了。</li><li>consumer offset<br>Consumer Group在MessageQueue上的消息消费进度，其实际值为队列中消费了的消息数+1，即表示下次拉取消息的位置。<br>DefaultMQPushConsumer.setConsumeFromWhere(ConsumerFromWhere)可设置从哪开始消费消息，但该设置的优先级在offset store后，当从offset store中读取不到offset的时候，ConsumerFromWhere的设置才生效。大部分该设置在ConsumerGroup初次启动时才有效(启动会一般会存储offset)，即使Consumer正常运行时重启，依旧会接着上次的offset(从offset store中获取)开始消费，ConsumeFromWhere的设置无效。</li></ul></li><li><h3 id="Clustering-集群消费"><a href="#Clustering-集群消费" class="headerlink" title="Clustering(集群消费)"></a>Clustering(集群消费)</h3><p>集群消费模式下,相同Consumer Group的每个Consumer实例平均分摊消息。</p></li><li><h3 id="广播消费-Broadcasting"><a href="#广播消费-Broadcasting" class="headerlink" title="广播消费(Broadcasting)"></a>广播消费(Broadcasting)</h3><p>广播消费模式下，相同Consumer Group的每个Consumer实例都接收全量的消息。</p></li><li><h3 id="Normal-Ordered-Message-普通顺序消息"><a href="#Normal-Ordered-Message-普通顺序消息" class="headerlink" title="Normal Ordered Message(普通顺序消息)"></a>Normal Ordered Message(普通顺序消息)</h3><p>普通顺序消费模式下，消费者通过同一个消费队列收到的消息是有顺序的，不同消息队列收到的消息则可能是无顺序的。<br>如Broker Server将消息Msg_A、Msg_B、Msg_C按顺序发送到Topic_A主题上的队列Q_A、Q_B、Q_A，Consumer_A从订阅的Topic_A拉去消息的顺序可能为下：</p><ul><li>Msg_A-&gt;Msg_B-&gt;Msg_C</li><li>Msg_B-&gt;Msg_A-&gt;Msg_C</li><li>Msg_A-&gt;Msg_C-&gt;Msg_B<br>Msg_B进入队列Q_A在Msg_A之后，所以Msg_B必然在接收到Msg_A后才被发送</li></ul></li><li><h3 id="Strictly-Ordered-Message-严格顺序消息"><a href="#Strictly-Ordered-Message-严格顺序消息" class="headerlink" title="Strictly Ordered Message(严格顺序消息)"></a>Strictly Ordered Message(严格顺序消息)</h3><p>严格顺序消息模式下，消费者收到的所有消息均是有顺序的。如上例中Consumer_A收到的顺序只会是Msg_A-&gt;Msg_B-&gt;Msg_C</p></li><li><h3 id="Message-消息"><a href="#Message-消息" class="headerlink" title="Message(消息)"></a>Message(消息)</h3><p>消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题。RocketMQ中每个消息拥有唯一的Message ID，且可以携带具有业务标识的Key。系统提供了通过Message ID和Key查询消息的功能。常用属性：</p><ul><li>topic: 所属topic</li><li>tags: 消息标签，用来做服务端消息过滤。一个topic下可以有很多tags，一般都通过topic+tags来消费自己想要的结果。</li><li>keys: 消息关键词，查询消息使用</li><li>body: 消息内容</li></ul></li><li><h3 id="Tag-标签"><a href="#Tag-标签" class="headerlink" title="Tag(标签)"></a>Tag(标签)</h3><p>可理解为二级Topic，用于同一Topic下区分不同类型的消息。来自同一业务单元的消息，可以根据不同业务目的在同一Topic下设置不同标签。标签能够有效地保持代码的清晰度和连贯性，并优化RocketMQ提供的查询系统。消费者可以根据Tag实现对不同子Topic的不同消费逻辑，实现更好的扩展性。</p></li><li><h2 id="各MQ产品对比（译自RocketMQ官方对比）"><a href="#各MQ产品对比（译自RocketMQ官方对比）" class="headerlink" title="各MQ产品对比（译自RocketMQ官方对比）"></a>各MQ产品对比（译自RocketMQ官方对比）</h2></li></ul><table><thead><tr><th></th><th>RocketMQ</th><th>Kafka</th><th>ActiveMQ</th></tr></thead><tbody><tr><td>客户端SDK</td><td>Java，C ++，Go</td><td>Java，Scala等</td><td>Java，.NET，C ++等</td></tr><tr><td>协议规范</td><td>拉模型，支持TCP，JMS，OpenMessaging</td><td>拉模型，支持TCP</td><td>推送模型，支持OpenWire，STOMP，AMQP，MQTT，JMS</td></tr><tr><td>消息排序</td><td>确保对消息进行严格排序，并可以正常扩展</td><td>确保分区内消息的顺序</td><td>排他消费者或排他队列可确保顺序</td></tr><tr><td>定时消息</td><td>支持</td><td>不支持</td><td>支持</td></tr><tr><td>批量消息</td><td>支持，具有同步模式，可避免消息丢失</td><td>支持，带异步Producer</td><td>不支持</td></tr><tr><td>广播消息</td><td>支持</td><td>不支持</td><td>支持</td></tr><tr><td>消息过滤器</td><td>支持，基于SQL92的属性过滤器表达式过滤</td><td>支持，使用kafka stream过滤</td><td>支持</td></tr><tr><td>服务器触发重新交付</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>消息存储</td><td>高性能和低延迟文件存储</td><td>高性能文件存储</td><td>使用JDBC和高性能日志（例如levelDB，kahaDB）存储支持非常快速持久性</td></tr><tr><td>消息追溯</td><td>支持时间戳和偏移量追溯</td><td>支持的偏移量追溯</td><td>支持</td></tr><tr><td>消息优先级</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>高可用与故障切换</td><td>支持主从模式</td><td>支持，需额外配置ZooKeeper服务器</td><td>支持，取决于存储，如果使用kahadb，则需要ZooKeeper服务器</td></tr><tr><td>消息追踪</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>配置特点</td><td>开箱即用，用户只需要注意一些配置</td><td>使用键值对格式进行配置，这些值可以从文件或以编程方式提供</td><td>默认配置为低级别，用户需要优化配置参数</td></tr><tr><td>操作管理工具</td><td>支持，Web控制台和终端命令都可操作管理</td><td>支持，使用终端命令管理</td><td>支持</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h5 id=&quot;RocketMQ主要由-Producer、Broker、Consumer、NameServer四部分组成&quot;&gt;&lt;a href=&quot;#RocketMQ主要由-Producer、Broker、Consumer、NameServer四部分组成&quot; c
      
    
    </summary>
    
    
      <category term="RocketMQ" scheme="https://wilson-he.gitee.io/categories/RocketMQ/"/>
    
    
      <category term="RocketMQ" scheme="https://wilson-he.gitee.io/tags/RocketMQ/"/>
    
      <category term="Spring Boot" scheme="https://wilson-he.gitee.io/tags/Spring-Boot/"/>
    
      <category term="Spring Cloud" scheme="https://wilson-he.gitee.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>hexo+gitee/github搭建个人博客的流程</title>
    <link href="https://wilson-he.gitee.io/undefined/"/>
    <id>https://wilson-he.gitee.io/undefined/</id>
    <published>2020-04-20T07:27:02.160Z</published>
    <updated>2020-04-20T07:27:02.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选择该方式搭建的理由和要做的准备"><a href="#选择该方式搭建的理由和要做的准备" class="headerlink" title="选择该方式搭建的理由和要做的准备"></a>选择该方式搭建的理由和要做的准备</h2><p>每个项目在开始之前，都需要先清楚项目的目的、主要的需求和核心点在哪。我在选择搭建的方式之前，根据个人状况确认了博客的搭建需要满足以下需求：</p><ol><li>无需自备服务器，静态网站也没关系</li><li>不错的分类归档</li><li>方便文章追溯</li><li>简洁的排版</li><li>不用了解或使用太多前端知识(排版是我的痛)</li></ol><p>根据自行百度了解，在github/gitee上搭建的Pages博客最起码是满足第1点要求的，选用哪种方式在github上搭建便打算先简单使用下搭建的技术了解后再做确认。下图为gitee支持搭建静态网站的技术：<br><img src="https://user-gold-cdn.xitu.io/2020/3/13/170d2c32245710c7?w=426&h=24&f=png&s=4150" alt="gitee-pages.png"><br>第一个选用的是hexo(庆幸不用选第二个了)，理由是文章多，有足够的参考，官方网站也提供中文文档。在开始之前需要做以下的准备：</p><ul><li>nodejs安装(百度官网下载安装即可)</li><li>github/gitee账号</li><li>git安装</li></ul><p>虽然gitee/github都可以部署，但还是要提下两者之间的细微区别：</p><ul><li>gitee是国内站点，网络稳定高速，github访问有时不稳定</li><li>站点项目更新部署到github/gitee后，github会自动重新部署更新，失败后还会给你发邮件，gitee则需要到respository里手动更新(除非你升级会员)<br><img src="https://user-gold-cdn.xitu.io/2020/3/13/170d2c322274bd8c?w=1096&h=492&f=jpeg&s=58000" alt="git-page-email.jpg"></li></ul><p>在部署到gitee/github之前可以先在本地调试样式添加文章，调好了后再部署到github上。</p><h2 id="搭建hexo本地环境"><a href="#搭建hexo本地环境" class="headerlink" title="搭建hexo本地环境"></a>搭建hexo本地环境</h2><ol><li>确认nodejs已安装：node -v</li><li>安装hexo:npm install -g hexo</li><li>环境初始化：hexo init 目录名(目录不存在则自动创建),出现Start blogging with Hexo!则完成</li><li>进入初始化的项目目录后运行：hexo server [-p 端口号],默认端口为4000,访问localhost:port出现下图则本地基础环境搭建完成<br><img src="https://user-gold-cdn.xitu.io/2020/3/13/170d2c322475969c?w=1176&h=596&f=png&s=237753" alt="theme-landscape.png"></li></ol><h2 id="个人了解到的hexo与next主题配置"><a href="#个人了解到的hexo与next主题配置" class="headerlink" title="个人了解到的hexo与next主题配置"></a>个人了解到的hexo与next主题配置</h2><p>项目目录下的核心目录/文件如下：</p><ul><li>scaffolds:模板、脚架目录</li><li>source：源文件夹(内容核心)，所有的文章和分类、标签等都是通过该文件夹下的内容进行发布的</li><li>source/_post：所有发布的文章都在该文件夹中</li><li>source/xxx：菜单xxx页面，如分类source/categories用于存放分类页，但分类页md文件是无需内容的，hexo会自动索引</li><li>themes：当前hexo项目的各类主题存放文件夹，把所需的主题目录添加到该文件夹中并更改项目_config.yml相应配置即可更换主题</li><li>themes/{themeName}/_config.yml：主题配置文件，主题的各种样式、配置都可在该文件中更改</li><li>_config.yml：项目配置文件，设置项目的通用配置(主题外的配置，如标题、分页、搜索、作者、发布地址等)<br>由于landscape的排版与样式不太符合自己的style，所以选择了next，足够简洁，一目了然(作为最多人选择的主题不是没有原因的)。使用next主题只需将该主题目录下载存放到项目的themes下并更改/_config.yml的theme配置值为相应主题名。<blockquote><p>下载next主题(如果慢的话可以同步到gitee再从gitee下载)：git clone <a href="https://github.com/theme-next/hexo-theme-next.git" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next.git</a></p></blockquote></li></ul><p>以next为例，hexo的页面都是通过_config.yml与/themes/next/_config.yml配置的，明显的配置如下图(c:为_config.yml中的配置,tc:themes/next/_config.yml中的配置)：<br><img src="https://user-gold-cdn.xitu.io/2020/3/13/170d2c3224b4225c?w=1341&h=787&f=png&s=85865" alt="next-homepage.png"></p><h3 id="菜单栏menu配置"><a href="#菜单栏menu配置" class="headerlink" title="菜单栏menu配置"></a>菜单栏menu配置</h3><p>hexo菜单栏可以在项目目录下通过<code>hexo new page {menuName}</code>指令创建，也可直接创建/source/{menuName}/index.md文件,并在themes\next_config.yml添加<code>menu:{menuName}</code>配置，如一个自定义菜单的局部配置(next/_config.yml)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  # || 后面是图标名，可在https:&#x2F;&#x2F;fontawesome.com&#x2F;icons中查询所需图片</span><br><span class="line">  home: &#x2F;index || home</span><br><span class="line">  about: &#x2F;about&#x2F; || user</span><br><span class="line">  tags: &#x2F;tags&#x2F; || tags</span><br><span class="line">  categories: &#x2F;categories&#x2F; || th</span><br><span class="line">  temp: &#x2F;temp&#x2F; || calendar</span><br><span class="line">  archives: &#x2F;archives&#x2F; || archive</span><br></pre></td></tr></table></figure><p>文件与效果图：<br><img src="https://user-gold-cdn.xitu.io/2020/3/13/170d2c322c06e40e?w=1046&h=712&f=png&s=75456" alt="temp-menu.png"></p><p>需要注意的是在fontawesome中搜到的图标不一定都有，还需要根据图标名查询<code>themes/next/source/lib/font-awesome/css/font-awesome.css</code>下有没有该图标样式，如stack-overflow则在css文件下先搜索下有没有该样式，有的话才会显示fontawesome中对应的图标，没有的话会显示一个矩形。有些图标fontawesome有但css中没有的原因是版本不同，目前我在网上搜的最新fontawesome最新的css是4.7.0的，但fontawesome上的一些图标版本是新的版本才有(如blog)的，所以个人猜测是版本原因导致网站上搜到的一些图标不可用。仔细点观察其实可以发现css中的样式content是与fontawesome上的图标Unicode是一样的：<br><img src="https://user-gold-cdn.xitu.io/2020/3/13/170d2c322cd46ccf?w=1066&h=760&f=png&s=57984" alt="blog-icon.png"></p><h3 id="文章创建、添加标签、分类"><a href="#文章创建、添加标签、分类" class="headerlink" title="文章创建、添加标签、分类"></a>文章创建、添加标签、分类</h3><p>文章创建可通过在/source/_posts下创建”文章.md”文件就可，也可通过命令行<code>hexo new {article}</code>来创建。<br>hexo里的文章都可通过添加文章头进行文章归档，以下为一篇个人文章头：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 聊聊MQ与如何基于Spring Boot RocketMQ搭建一个消息中心</span><br><span class="line">date: 2020-03-09 16:54:18</span><br><span class="line">tags: [RocketMQ, Spring Boot]</span><br><span class="line">categories: [RocketMQ, Spring Boot]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>在文章头中添加了tags和categories后即可完成标签与分类，无需额外的操作，前提是source目录下已存在categories与tags。</p><h3 id="个人-config-yml主要更改的配置"><a href="#个人-config-yml主要更改的配置" class="headerlink" title="个人_config.yml主要更改的配置"></a>个人_config.yml主要更改的配置</h3><p>比较细的细节觉得前面都讲了，请容我偷下懒吧，以下为个人的配置文件主要更改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># Site 站点配置</span><br><span class="line">title: Wilson Blog</span><br><span class="line">subtitle: &#39;一名普通的搬砖工&#39;</span><br><span class="line">description: &#39;一名普通的搬砖工&#39;</span><br><span class="line">keywords:</span><br><span class="line">author: Wilson He</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: &#39;Asia&#x2F;Shanghai&#39;</span><br><span class="line"></span><br><span class="line">index_generator:</span><br><span class="line">  path: &#39;&#39;</span><br><span class="line">  # 每页只显示一篇文章</span><br><span class="line">  per_page: 1</span><br><span class="line">  # 根据创建时间排序，如果文章有设置top值，则先按top由高到低排，目前个人是在索引文章上加了top值设为首页文章的</span><br><span class="line">  order_by: -date</span><br><span class="line">theme: next</span><br><span class="line"># 添加搜索功能，需先安装搜索插件：npm install hexo-generator-searchdb并将themes的_config.yml中local_search:enable设为true</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br><span class="line"># 部署的项目地址，为私有仓库</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;Wilson-He&#x2F;wilson-he.github.io</span><br><span class="line">#  repo: https:&#x2F;&#x2F;gitee.com&#x2F;Wilson-He&#x2F;Wilson-He</span><br></pre></td></tr></table></figure><p>启用搜索服务需要安装搜索插件：<code>npm install hexo-generator-searchdb</code></p><h3 id="个人themes-next-config-yml主要更改的配置"><a href="#个人themes-next-config-yml主要更改的配置" class="headerlink" title="个人themes/next/_config.yml主要更改的配置"></a>个人themes/next/_config.yml主要更改的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: &#x2F;images&#x2F;favicon-16x16-next.png</span><br><span class="line">  # 这里的&#x2F;images路径是themes&#x2F;next&#x2F;source下的images</span><br><span class="line">  medium: &#x2F;images&#x2F;piano-icon.png</span><br><span class="line">  apple_touch_icon: &#x2F;images&#x2F;apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: &#x2F;images&#x2F;logo.svg</span><br><span class="line">footer:</span><br><span class="line">  # 不显示next原有的powered和version footer</span><br><span class="line">  powered:</span><br><span class="line">    enable: false</span><br><span class="line">    version: false</span><br><span class="line"># 首页信息与菜单显示样式，Pisces为网站信息显示在左侧，Mist在顶部，更多的自行尝试</span><br><span class="line">scheme: Pisces</span><br><span class="line">menu:</span><br><span class="line">  home: &#x2F;index || home</span><br><span class="line">  about: &#x2F;about&#x2F; || user</span><br><span class="line">  tags: &#x2F;tags&#x2F; || tags</span><br><span class="line">  categories: &#x2F;categories&#x2F; || th</span><br><span class="line">  temp: &#x2F;temp&#x2F; || calendar</span><br><span class="line">  archives: &#x2F;archives&#x2F; || archive</span><br><span class="line">sidebar:</span><br><span class="line">  # 边栏位置设置</span><br><span class="line">  position: left</span><br><span class="line"># 头像设置</span><br><span class="line">avatar:</span><br><span class="line">  url: https:&#x2F;&#x2F;xxx.aliyuncs.com&#x2F;atavar&#x2F;xxx.jpg</span><br><span class="line"># 头像下显示的社交图标与链接，||后为fontawesome上的图标名</span><br><span class="line">social:</span><br><span class="line">  gitee: https:&#x2F;&#x2F;gitee.com&#x2F;Wilson-He || gg</span><br><span class="line">  github: https:&#x2F;&#x2F;github.com&#x2F;Wilson-He || github</span><br><span class="line">  csdn: https:&#x2F;&#x2F;blog.csdn.net&#x2F;z28126308 || creative-commons</span><br><span class="line">  Email: mailto:845023508@qq.com || envelope</span><br><span class="line"># 奖赏设置，true则每篇文章末尾会新增捐赠按钮，点击会显示收款图片(如果是直接显示我肯定会直接enable false的[doge])</span><br><span class="line">reward_settings:</span><br><span class="line">  # If true, reward will be displayed in every article by default.</span><br><span class="line">  enable: true</span><br><span class="line">  animation: false</span><br><span class="line">  #comment: Donate comment here.</span><br><span class="line">reward:</span><br><span class="line">  wechatpay: &#x2F;images&#x2F;wechatpay.jpg</span><br><span class="line">  alipay: &#x2F;images&#x2F;alipay.jpg</span><br><span class="line">&#x2F;&#x2F; 头部显示github banner</span><br><span class="line">github_banner:</span><br><span class="line">  enable: true</span><br><span class="line">  permalink: https:&#x2F;&#x2F;github.com&#x2F;Wilson-He</span><br><span class="line">&#x2F;&#x2F; 启用本地搜索</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><p>配置完后去看下文章，这阅读体验已经比预想的好很多。<br><img src="https://user-gold-cdn.xitu.io/2020/3/13/170d2c326af3c3ea?w=1073&h=597&f=png&s=77364" alt="article-demo.png"><br>将目标文章置顶需安装插件:<code>npm install hexo-generator-index-pin-top --save</code><br>然后在文章添加<code>top: true</code>即可。</p><h2 id="部署到github-gitee"><a href="#部署到github-gitee" class="headerlink" title="部署到github/gitee"></a>部署到github/gitee</h2><p>部署流程十分简单，安装hexo git插件后在github/gitee建立仓库，再在项目目录命令行部署即可。</p><p>安装hexo git插件：<code>npm install hexo-deployer-git --save</code><br>github:</p><ol><li>创建命名为username.github.io的页面仓库(小知识：个人开源的项目命名规则都是io.github.projectName，这里纯粹是顺序调转了)</li><li>在项目目录命令行执行<code>hexo deploy</code> deploy指令即可部署到页面仓库(如果没配置好git则需要输入github账号密码)<br>每次有部署时github都会为我们重新部署运行静态博客，失败会发送邮件，这一点很方便。博客页面仓库配置成功时查看仓库Settings下的Github Pages会显示以下图片内容，访问该地址即可显示你的博客页面(没事不用来闲逛，目前没啥内容可给大家看)：<img src="https://user-gold-cdn.xitu.io/2020/3/13/170d2c32757dd24a?w=700&h=543&f=png&s=38014" alt="github-success.png"></li></ol><p>gitee:</p><ol><li>创建博客发布仓库(命名无要求)</li><li>执行<code>hexo deploy</code></li><li>点击仓库“服务”-&gt;”Gitee Pages”，配置成功后会显示网站地址，<br>非会员版gitee部署后要重新更新，有时还会有样式显示问题，唯一的优点就是比github快</li></ol><h2 id="搭建过程使用到的文档"><a href="#搭建过程使用到的文档" class="headerlink" title="搭建过程使用到的文档"></a>搭建过程使用到的文档</h2><ol><li>hexo官方文档：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></li><li>next主题官方文档(很详细)：<a href="https://theme-next.org/docs/getting-started/" target="_blank" rel="noopener">https://theme-next.org/docs/getting-started/</a> ，next主题的所有设置、第三方服务(评论、搜索、统计等)、插件都有详细的文档</li><li>fontawesome图标网站：<a href="https://fontawesome.com/?from=io" target="_blank" rel="noopener">https://fontawesome.com/?from=io</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;选择该方式搭建的理由和要做的准备&quot;&gt;&lt;a href=&quot;#选择该方式搭建的理由和要做的准备&quot; class=&quot;headerlink&quot; title=&quot;选择该方式搭建的理由和要做的准备&quot;&gt;&lt;/a&gt;选择该方式搭建的理由和要做的准备&lt;/h2&gt;&lt;p&gt;每个项目在开始之前，都需要先
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ArrayList与LinkedList区别与源码分析</title>
    <link href="https://wilson-he.gitee.io/list/"/>
    <id>https://wilson-he.gitee.io/list/</id>
    <published>2020-04-20T07:19:50.836Z</published>
    <updated>2020-04-20T07:19:50.836Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>数据结构在计算机中的存储方式(线性表的物理结构)主要分为以下两种：</p><ul><li><strong>顺序存储结构</strong>：数据存储在连续的存储单元中，如数组<ul><li>优点<ul><li>存储密度大（＝1），存储空间利用率高，不需要为元素之间的逻辑关系而增加额外存储空间</li><li>随机存取表中元素</li></ul></li><li>缺点<ul><li>插入和删除操作需要移动元素，效率低</li><li>当线性表变化较大的时候，难以确定存储空间的容量<br><img src="https://knowledge-pictures.oss-cn-beijing.aliyuncs.com/hexo-blog/Java%E5%9F%BA%E7%A1%80/%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84.png" alt="%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84.png"></li></ul></li></ul></li><li><strong>链式存储结构</strong>：数据存放在任意的存储单元中，如链表<ul><li>优点：<ul><li>逻辑相邻的节点物理上不必相邻，插入、删除灵活，只需改变节点中的指针指向</li></ul></li><li>缺点：<ul><li>存储密度小（&lt;1），存储空间利用率低，需为元素之间的逻辑关而增加额外存储空间</li><li>查找节点时需遍历元素节点，效率比顺序存储慢<br><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2132913655,2932434764&fm=11&gp=0.jpg" alt="u=2132913655,2932434764&amp;fm=11&amp;gp=0.jpg"></li></ul></li></ul></li></ul><p><code>ArrayList</code>是基于数组结构(顺序存储)的列表，<code>LinkedList</code>是基于双向链表(链表存储)的列表，在介绍了以上两种存储结构后，相信即使不了解<code>LinkedList</code>和<code>ArrayList</code>的源码也知道这两个列表的核心区别了，但作为开发者，一定的源码了解还是需要的。</p><h1 id="ArrayList源码分析"><a href="#ArrayList源码分析" class="headerlink" title="ArrayList源码分析"></a>ArrayList源码分析</h1><h2 id="核心结构-类图分析"><a href="#核心结构-类图分析" class="headerlink" title="核心结构(类图分析)"></a>核心结构(类图分析)</h2><p><img src="http://www.plantuml.com/plantuml/png/XPBXQi8m58N_zoakx8yoz0baCzGC19sY7SoDKTBqEZBI19hhS6vxzzMk6cDbAxG_pldkwMrpXev4IPj2HyeGbciX4IRAqUVtYR0G9hS5anAT2unOMuCYqnYgLckKfAm9v2MMIcYrQtYfXNF0CaUba1JCX5QzJWJLTGMLO9n2Gw2gkx1vR3U6ekD8MOeFp_V0aI0bOQsCqFN8YD-nXqcIncpEud6okiJDiZUKzFm2V3fFLYcVy2c_JqOiON_IJVGXEVrdskyqPOyfMopOAbsEdtX3xGsdTdZ-uVvzgB6eX94WKKFNa5chKHWGUTxXWDsspBJk-5yzk0NS4fhS0Ry1USwNMDXt39C2HzNdaEFsu7DuHMhBHs6sxlok3xPR7LhaLu71Lxz_eGrHA3LehnUq8ze_wWJV0A-5w6cNQzjFUAwTTcpwkU5RtVQ6QF9DeNy0" alt="ArrayList Class Diagram"></p><ul><li><p><code>List</code>：声明是一个有序的集合，可以控制元素位置并索引访问。</p></li><li><p><code>RandomAccess</code>：声明支持快速随机访问的标记接口，常用于列表类实现。该接口的主要目的是允许通用算法更改其行为，即必要时选择更好的算法进行性能上的提高，实现了该接口的列表使用for遍历比迭代器<code>Iterator</code>遍历效率高。<br><img src="https://knowledge-pictures.oss-cn-beijing.aliyuncs.com/hexo-blog/Java%E5%9F%BA%E7%A1%80/RandomAccess.png" alt="RandomAccess.png"></p></li><li><p><code>Serializable</code>：启用类的可序列化特性。</p></li><li><p><code>Cloneable</code>：声明类是可克隆的，且调用<code>clone()</code>方法时不会抛出<code>CloneNotSupportedException</code></p></li><li><p><code>AbstractList</code>：提供了<code>List</code>接口的基本实现，并尽可能的减少<code>List</code>接口”随机访问”数据存储支持的工作</p></li></ul><h2 id="属性解析"><a href="#属性解析" class="headerlink" title="属性解析"></a>属性解析</h2><p><code>DEFAULT_CAPACITY</code>：默认容量10，用于构造函数初始化与容量运算。<br><code>EMPTY_ELEMENTDATA</code>：共享的空数组，调用<code>ArrayList</code>有参构造函数参数容量值为0(即一般考虑不再进行容量扩展)时赋给<code>elementData</code>。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public ArrayList(int initialCapacity) &#123;</span><br><span class="line">    if (initialCapacity &gt; 0) &#123;</span><br><span class="line">        this.elementData &#x3D; new Object[initialCapacity];</span><br><span class="line">    &#125; else if (initialCapacity &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        this.elementData &#x3D; EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public ArrayList(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">    elementData &#x3D; c.toArray();</span><br><span class="line">    if ((size &#x3D; elementData.length) !&#x3D; 0) &#123;</span><br><span class="line">        if (elementData.getClass() !&#x3D; Object[].class)</span><br><span class="line">            elementData &#x3D; Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        this.elementData &#x3D; EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code>：共享的空数组，与<code>EMPTY_ELEMENTDATA</code>区别在于该数组是用来容量运算的，调用<code>ArrayList</code>无参构造函数时会把该对象赋给<code>elementData</code>,添加元素时再重新计算扩容，所以一般建议使用有参构造函数赋予原始容量。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public ArrayList() &#123;</span><br><span class="line">  this.elementData &#x3D; DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>elementData</code>：存储ArrayList的元素的数组缓冲区。<br><code>size</code>：<code>ArrayList</code>包含的元素数量，<code>elementData</code>数组的元素数量。<br><code>MAX_ARRAY_SIZE</code>：分配的最大数组大小,值为Integer.MAX-8</p><h2 id="方法解析"><a href="#方法解析" class="headerlink" title="方法解析"></a>方法解析</h2><h3 id="add-E-添加元素"><a href="#add-E-添加元素" class="headerlink" title="add(E)添加元素"></a>add(E)添加元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * (1) 数组末尾添加元素 </span><br><span class="line"> *&#x2F;</span><br><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    ensureCapacityInternal(size + 1);  &#x2F;&#x2F; Increments modCount!!</span><br><span class="line">    &#x2F;&#x2F; 容量值自增并将元素附加到数组末尾</span><br><span class="line">    elementData[size++] &#x3D; e;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * (2) 确保内部的容量能满足所需最小容量minCapacity</span><br><span class="line"> *&#x2F;</span><br><span class="line">private void ensureCapacityInternal(int minCapacity) &#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * (3) 根据数组所需的最小容量minCapacity进行容量计算</span><br><span class="line"> *&#x2F;</span><br><span class="line">private static int calculateCapacity(Object[] elementData, int minCapacity) &#123;</span><br><span class="line">    &#x2F;&#x2F; 若元素数组为引用的空数组，则返回默认容量(10)与minCapacity之间的最大值，不为空则返回minCapacity</span><br><span class="line">    if (elementData &#x3D;&#x3D; DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        return Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    return minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * (4) 根据数组所需的最小容量minCapacity确保精确的容量</span><br><span class="line"> *&#x2F;</span><br><span class="line">private void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    &#x2F;&#x2F; 判断添加元素后的元素数目是否大于数组长度，true则进行数组扩容，false则完成元素添加</span><br><span class="line">    if (minCapacity - elementData.length &gt; 0)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * (5) 根据数组所需的最小容量minCapacity判断是否扩容</span><br><span class="line"> *&#x2F;</span><br><span class="line">private void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    &#x2F;&#x2F; 判断添加元素后的元素数目是否大于数组长度，true则进行扩容，false则完成元素添加</span><br><span class="line">    if (minCapacity - elementData.length &gt; 0)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * (6) 重新建一个至少可以容纳最小容量minCapacity的数组并进行数组元素拷贝，消耗大</span><br><span class="line"> *&#x2F;</span><br><span class="line">private void grow(int minCapacity) &#123;</span><br><span class="line">    int oldCapacity &#x3D; elementData.length;</span><br><span class="line">    &#x2F;&#x2F; 若所需最小容量minCapacity大于旧容量oldCapacity+oldCapacity右移1值，则新容量为minCapacity，反正新容量为旧容量运算值</span><br><span class="line">    int newCapacity &#x3D; oldCapacity + (oldCapacity &gt;&gt; 1);</span><br><span class="line">    if (newCapacity - minCapacity &lt; 0)</span><br><span class="line">        newCapacity &#x3D; minCapacity;</span><br><span class="line">    &#x2F;&#x2F; 大容量数组，一般不会调用到</span><br><span class="line">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class="line">        newCapacity &#x3D; hugeCapacity(minCapacity);</span><br><span class="line">    &#x2F;&#x2F; 新建一个长度为newCapacity的数组并将旧数组元素负责过来</span><br><span class="line">    elementData &#x3D; Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 大容量计算，一般不会调用到</span><br><span class="line"> *&#x2F;</span><br><span class="line">private static int hugeCapacity(int minCapacity) &#123;</span><br><span class="line">    if (minCapacity &lt; 0) &#x2F;&#x2F; overflow</span><br><span class="line">        throw new OutOfMemoryError();</span><br><span class="line">    return (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">        MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下重新整理一下新增的的步骤：</p><ol><li>add()数组末尾添加元素 </li><li>ensureCapacityInternal()确保内部的容量能满足所需最小容量minCapacity</li><li>calculateCapacity()根据数组所需的最小容量minCapacity进行容量计算</li><li>ensureExplicitCapacity()根据数组所需的最小容量minCapacity确保精确的容量</li><li>ensureExplicitCapacity()根据数组所需的最小容量minCapacity判断是否扩容,若需要则进行步骤6</li><li>grow()重新建一个至少可以容纳最小容量minCapacity的数组并进行数组元素拷贝，消耗大，所以建议一般使用有参构建函数创建列表时设置好容量</li></ol><p>由上述流程可以看出，<code>ArrayList</code>的<code>add(E e)</code>方法在容量足以确保的情况下效率是很高的，直接将新元素赋予数组元素的末尾下标+1即可，复杂度仅为O(1)。</p><h3 id="add-int-E-增元素"><a href="#add-int-E-增元素" class="headerlink" title="add(int, E)增元素"></a>add(int, E)增元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void add(int index, E element) &#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line">    ensureCapacityInternal(size + 1);  &#x2F;&#x2F; Increments modCount!!</span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + 1, size - index);</span><br><span class="line">    elementData[index] &#x3D; element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法的主要核心在<code>System.arraycopy()</code>方法，该方法把elementData数组中的index位置起的size-index个元素(即index下标后的元素)复制到下标index+1，然后再把新的元素element赋到index下标位置。由于需要进行元素的位置逐个后移，所以性能耗费大，时间复杂度为O(n)，n为指定位置后的元素数目。<br>如在非末尾位置插入元素的操作较多，选择<code>LinkedList</code>效果会比<code>ArrayList</code>更好。</p><h3 id="addAll-Collection-lt-extends-E-gt-添加元素"><a href="#addAll-Collection-lt-extends-E-gt-添加元素" class="headerlink" title="addAll(Collection&lt;? extends E&gt;)添加元素"></a>addAll(Collection&lt;? extends E&gt;)添加元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public boolean addAll(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">    Object[] a &#x3D; c.toArray();</span><br><span class="line">    int numNew &#x3D; a.length;</span><br><span class="line">    ensureCapacityInternal(size + numNew);  &#x2F;&#x2F; Increments modCount</span><br><span class="line">    System.arraycopy(a, 0, elementData, size, numNew);</span><br><span class="line">    size +&#x3D; numNew;</span><br><span class="line">    return numNew !&#x3D; 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上源码可以看到当添加集合元素时，也是需要进行数组拷贝的，不过是直接拷贝到列表数组末尾，时间复杂度由集合元素数目而定，即为O(n)。</p><h3 id="remove-Object-删元素"><a href="#remove-Object-删元素" class="headerlink" title="remove(Object)删元素"></a>remove(Object)删元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public boolean remove(Object o) &#123;</span><br><span class="line">    if (o &#x3D;&#x3D; null) &#123;</span><br><span class="line">        for (int index &#x3D; 0; index &lt; size; index++)</span><br><span class="line">            if (elementData[index] &#x3D;&#x3D; null) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        for (int index &#x3D; 0; index &lt; size; index++)</span><br><span class="line">            if (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void fastRemove(int index) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    int numMoved &#x3D; size - index - 1;</span><br><span class="line">    if (numMoved &gt; 0)</span><br><span class="line">        System.arraycopy(elementData, index+1, elementData, index, numMoved);</span><br><span class="line">    elementData[--size] &#x3D; null; &#x2F;&#x2F; clear to let GC do its work</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然删除元素的主要方面命名为<code>fastRemove()</code>，但从其代码依然可以看出这方法并不fast，指定位置删除元素后还要进行元素前移，性能耗费与指定位置添加差别不大，时间复杂度为O(n)，n为指定位置后的元素数目。<br>如删除元素的操作较多，选择<code>LinkedList</code>效果会比<code>ArrayList</code>更好。</p><h3 id="set-int-E-改元素"><a href="#set-int-E-改元素" class="headerlink" title="set(int, E)改元素"></a>set(int, E)改元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public E get(int index) &#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    return elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>替换指定下标数组元素，复杂度为O(1)，效率高。</p><h3 id="get-int-查元素"><a href="#get-int-查元素" class="headerlink" title="get(int)查元素"></a>get(int)查元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public E get(int index) &#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    return elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据下标获取数组元素，复杂度为O(1)，效率高。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ArrayList有以下特点：</p><ul><li>添加元素性能因参数有所区别，但都需注意数组容量不足时ArrayList会进行扩容产生性能消耗<ul><li>add(E)在数组末尾添加元素，复杂度O(1)</li><li>add(int, E)在数组指定位置添加元素，复杂度O(n),n为下标后的元素数目</li><li>addAll(Collection)在数组末尾添加集合元素，复杂度O(n),n为集合中的元素数目</li></ul></li><li>删除元素慢，remove()删除元素，后面元素需逐个移动，复杂度O(n),n为下标后的元素数目</li><li>更改效率高，set(index, E)直接根据下标替换数组元素，复杂度O(1)</li><li>查询效率高，get(index)直接根据下标获取数组元素，复杂度O(1)</li></ul><h1 id="LinkedList源码解析"><a href="#LinkedList源码解析" class="headerlink" title="LinkedList源码解析"></a><code>LinkedList</code>源码解析</h1><h2 id="核心结构-类图分析-1"><a href="#核心结构-类图分析-1" class="headerlink" title="核心结构(类图分析)"></a>核心结构(类图分析)</h2><p><code>LinkedList</code>是基于双向链表数据结构的列表，链表中的每个节点对应内部类<code>Node</code>。<br><img src="https://knowledge-pictures.oss-cn-beijing.aliyuncs.com/hexo-blog/Java%E5%9F%BA%E7%A1%80/LinkedList-Queue.png" alt="Linked-Queue"></p><p><code>LinkedList</code>实现了<code>List</code>和<code>Deque</code>(双向队列)接口，即该类包含了列表与双向队列的操作方法，其类图如下：<br><img src="http://www.plantuml.com/plantuml/png/TPD1Rl8m48NtFiKiWu2S0Fq_g4rNgAZY14uyL6uTkxKd245xzzfE80uMI4JnzzvunY_osX6trBMAIKre3xn1s4f7bzy4F2cZaTSA9tIFLd8bpuFGAEuSl1g15mPGWIHi6KImglw1nXCboo-Bns5Pf6pXAr5XYveMazePIti_utSN-noD5C25U97MKU5hPmdSyf5LOB4rH-oDAOck0CgoBAPjtZhiS1g5KGeRaaPx76LO_IoN_K1iL7iQ3KCoMwa_KSHi6VZV4iXoxIHg0kd_Jfun4wu97CBK3rN51t4EjJ4AkGwdZoVFyKQfOfnpzHzykAY50xzHS-_l4yfs6XKPfnTukkeLl2Fb-0PsXs9NV_ZcO4BMB0GNCYpB9A4io0Z38tDkQkS3QMWVzj4akGfugCfje_YWyEPCCahjTvFaRdQzBVcfqXkJYUChp7s_y6tP6hNeMlK7" alt="LinkedList类图"></p><ul><li><code>AbstractSequentialList</code>：提供<code>List</code>接口的基本实现，以最小化实现<code>List</code>接口类顺序访问数据存储所需要提供的支持(实现)。</li></ul><p>从类的继承与接口实现角度看，<code>LinkedList</code>与<code>ArrayList</code>的区别在于<code>LinkedList</code>继承了<code>AbstractSequentialList</code>列表类与实现了<code>Deque</code>双向队列接口，少实现了一个快速访问接口<code>RandomAccess</code>，因而相比于<code>ArrayList</code>访问效率会有所不及，但多了双向队列的特性(从这个角度看挺有意思的)。</p><h1 id="LinkedList常用源码解析"><a href="#LinkedList常用源码解析" class="headerlink" title="LinkedList常用源码解析"></a><code>LinkedList</code>常用源码解析</h1><p>由于<code>LinkedList</code>是链表结构列表，所以访问该列表中的元素只能通过第一个节点或最后一个节点遍历获取，因此查询的效率比使用数组根据下标获取元素的<code>ArrayList</code>慢。</p><h2 id="属性解析-1"><a href="#属性解析-1" class="headerlink" title="属性解析"></a>属性解析</h2><p><code>size</code>：列表元素数目<br><code>first</code>：第一个节点<br><code>last</code>：最后一个节点</p><h2 id="方法解析-1"><a href="#方法解析-1" class="headerlink" title="方法解析"></a>方法解析</h2><h3 id="add-E-添加元素-1"><a href="#add-E-添加元素-1" class="headerlink" title="add(E)添加元素"></a>add(E)添加元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void linkLast(E e) &#123;</span><br><span class="line">    final Node&lt;E&gt; l &#x3D; last;   &#x2F;&#x2F;  1</span><br><span class="line">    final Node&lt;E&gt; newNode &#x3D; new Node&lt;&gt;(l, e, null); &#x2F;&#x2F;  2</span><br><span class="line">    last &#x3D; newNode; &#x2F;&#x2F;  3</span><br><span class="line">    if (l &#x3D;&#x3D; null) &#x2F;&#x2F;  4</span><br><span class="line">        first &#x3D; newNode;</span><br><span class="line">    else</span><br><span class="line">        l.next &#x3D; newNode;</span><br><span class="line">    size++;  &#x2F;&#x2F;  5</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由源码看出，<code>LinkedList</code>添加元素的流程如下：</p><ol><li>将当前列表的最后一个节点引用赋予临时变量l</li><li>创建一个新的节点存放新元素e，并把最后一个节点的引用l赋予新节点e</li><li>将最后一个节点的last指向新节点newNode</li><li>判断列表之前的最后一个节点是否为空(即列表是否为空)，空则将第一个节点first指向新节点newNode，非空则将之前最后一个节点的下一节点指向新节点</li></ol><p><code>LinkedList</code>的add(E)与addLast(E)的调用与效果是一样的，都是新建一个<code>Node</code>节点并更改最后一个节点的指向，消耗也不大，时间复杂度为O(1)。</p><h3 id="add-int-E-添加元素"><a href="#add-int-E-添加元素" class="headerlink" title="add(int,E)添加元素"></a>add(int,E)添加元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public void add(int index, E element) &#123;</span><br><span class="line">    checkPositionIndex(index);  &#x2F;&#x2F; 1. 校验索引是否超出列表范围</span><br><span class="line">    if (index &#x3D;&#x3D; size)</span><br><span class="line">        linkLast(element);  &#x2F;&#x2F; 2. 下标为元素数目则直接末尾添加</span><br><span class="line">    else</span><br><span class="line">        linkBefore(element, node(index)); &#x2F;&#x2F; 3. 获取链表中指定索引的节点，为新元素创建节点并插入到指定节点之前</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void checkPositionIndex(int index) &#123;</span><br><span class="line">    if (!isPositionIndex(index))</span><br><span class="line">        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private boolean isPositionIndex(int index) &#123;</span><br><span class="line">    return index &gt;&#x3D; 0 &amp;&amp; index &lt;&#x3D; size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 3.1 遍历节点以获取指定下标节点</span><br><span class="line"> *&#x2F;</span><br><span class="line">Node&lt;E&gt; node(int index) &#123;</span><br><span class="line">    &#x2F;&#x2F; 若index &lt; size &#x2F; 2. 则从第一个节点开始遍历，否则从最后一个节点开始遍历</span><br><span class="line">    if (index &lt; (size &gt;&gt; 1)) &#123;</span><br><span class="line">        Node&lt;E&gt; x &#x3D; first;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; index; i++)</span><br><span class="line">            x &#x3D; x.next;</span><br><span class="line">        return x;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        Node&lt;E&gt; x &#x3D; last;</span><br><span class="line">        for (int i &#x3D; size - 1; i &gt; index; i--)</span><br><span class="line">            x &#x3D; x.prev;</span><br><span class="line">        return x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 3.2 为新元素创建节点并插入到指定节点之前</span><br><span class="line"> *&#x2F;</span><br><span class="line">void linkBefore(E e, Node&lt;E&gt; succ) &#123;</span><br><span class="line">    final Node&lt;E&gt; pred &#x3D; succ.prev;</span><br><span class="line">    final Node&lt;E&gt; newNode &#x3D; new Node&lt;&gt;(pred, e, succ);</span><br><span class="line">    succ.prev &#x3D; newNode;</span><br><span class="line">    if (pred &#x3D;&#x3D; null)</span><br><span class="line">        first &#x3D; newNode;</span><br><span class="line">    else</span><br><span class="line">        pred.next &#x3D; newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新梳理一下<code>LinkedList</code>指定位置添加元素流程：</p><ol><li>校验位置索引是否超出列表范围</li><li>若index &lt; size / 2. 则从第一个节点开始遍历，否则从最后一个节点开始遍历</li><li>获取链表中指定索引index的节点，为新元素创建节点并插入到指定节点之前<br>3-1. 若index &lt; size / 2. 则从第一个节点开始遍历，否则从最后一个节点开始遍历，并返回指定索引节点<br>3-2. 为新元素创建节点并插入到指定节点之前</li></ol><p><code>LinkedList</code>虽然要遍历才能获取到指定位置节点，但插入元素时只需新建一个节点并更改相应的引用而已，并没有更多的更改操作，相比<code>ArrayList</code>的列表元素后移性能自然要好上不少，所以当对列表位置添加元素操作较多时选择<code>LinkedList</code>比<code>ArrayList</code>更好。</p><p><img src="https://knowledge-pictures.oss-cn-beijing.aliyuncs.com/hexo-blog/Java%E5%9F%BA%E7%A1%80/LinkedList-add.png" alt="add(E,index)"></p><h3 id="remove-Object-删除元素"><a href="#remove-Object-删除元素" class="headerlink" title="remove(Object)删除元素"></a>remove(Object)删除元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public boolean remove(Object o) &#123;</span><br><span class="line">    if (o &#x3D;&#x3D; null) &#123;</span><br><span class="line">        for (Node&lt;E&gt; x &#x3D; first; x !&#x3D; null; x &#x3D; x.next) &#123;</span><br><span class="line">            if (x.item &#x3D;&#x3D; null) &#123;</span><br><span class="line">                unlink(x);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        for (Node&lt;E&gt; x &#x3D; first; x !&#x3D; null; x &#x3D; x.next) &#123;</span><br><span class="line">            if (o.equals(x.item)) &#123;</span><br><span class="line">                unlink(x);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 删除节点链接</span><br><span class="line"> *&#x2F;</span><br><span class="line">E unlink(Node&lt;E&gt; x) &#123;</span><br><span class="line">    final E element &#x3D; x.item;</span><br><span class="line">    final Node&lt;E&gt; next &#x3D; x.next;</span><br><span class="line">    final Node&lt;E&gt; prev &#x3D; x.prev;</span><br><span class="line">    if (prev &#x3D;&#x3D; null) &#123;</span><br><span class="line">        first &#x3D; next;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        prev.next &#x3D; next;</span><br><span class="line">        x.prev &#x3D; null;</span><br><span class="line">    &#125;</span><br><span class="line">    if (next &#x3D;&#x3D; null) &#123;</span><br><span class="line">        last &#x3D; prev;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        next.prev &#x3D; prev;</span><br><span class="line">        x.next &#x3D; null;</span><br><span class="line">    &#125;</span><br><span class="line">    x.item &#x3D; null;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    return element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除节点流程：</p><ol><li>遍历获取目标元素节点</li><li>更改目标节点的上一节点与下一节点引用，更改元素数目</li></ol><p>删除节点与添加节点的操作区别不大，都是遍历更改节点的链接，效率比<code>ArrayList</code>的删除操作效率高。</p><h2 id="get-int-获取节点"><a href="#get-int-获取节点" class="headerlink" title="get(int)获取节点"></a>get(int)获取节点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public E get(int index) &#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    return node(index).item;</span><br><span class="line">&#125;</span><br><span class="line">Node&lt;E&gt; node(int index) &#123;</span><br><span class="line">    &#x2F;&#x2F; 若index &lt; size &#x2F; 2. 则从第一个节点开始遍历，否则从最后一个节点开始遍历</span><br><span class="line">    if (index &lt; (size &gt;&gt; 1)) &#123;</span><br><span class="line">        Node&lt;E&gt; x &#x3D; first;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; index; i++)</span><br><span class="line">            x &#x3D; x.next;</span><br><span class="line">        return x;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        Node&lt;E&gt; x &#x3D; last;</span><br><span class="line">        for (int i &#x3D; size - 1; i &gt; index; i--)</span><br><span class="line">            x &#x3D; x.prev;</span><br><span class="line">        return x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于<code>LinkedList</code>是基于双向链表的数据结构，所以查询时也是按照双向链表的查询方式，需要从头部或尾部开始遍历查找，故查询的性能比基于数组结构的<code>ArrayList</code>要差。</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>LinkedList有以下特点：</p><ul><li>增删元素快，遍历到指定节点后只需更改”指针”指向</li><li>查询效率慢，每次查询都需遍历链表</li><li>相比<code>ArrayList</code>需更多的存储空间来存储指向</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;数据结构在计算机中的存储方式(线性表的物理结构)主要分为以下两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;顺序存储结构&lt;/strong&gt;
      
    
    </summary>
    
    
      <category term="Java基础" scheme="https://wilson-he.gitee.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java集合" scheme="https://wilson-he.gitee.io/tags/Java%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>谈谈个人对JDK函数式编程的认知与使用</title>
    <link href="https://wilson-he.gitee.io/undefined/"/>
    <id>https://wilson-he.gitee.io/undefined/</id>
    <published>2020-04-20T07:02:26.665Z</published>
    <updated>2020-04-20T07:02:26.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>该文章主要介绍JDK中各种常见的函数式接口，并会附上一些个人对函数式编程的一些扩展思考与实际用法。</p><h1 id="常见的函数式接口介绍"><a href="#常见的函数式接口介绍" class="headerlink" title="常见的函数式接口介绍"></a>常见的函数式接口介绍</h1><p>jdk1.8的函数式接口都在rt.jar中<code>java.util.function</code>包下，以下以jdk集合类与个人常用的接口进行介绍：</p><ul><li><p><code>Function&lt;T,R&gt;</code>：传入类型为T的对象并执行含返回值(返回值为R-return类型)的指定方法，方法可临时实现。常见于类Optional<code>{map();flatMap();}</code>、Stream<code>{map();flatMap();}</code>、Comparator<code>{thenComparing();}</code>等，MybatisPlus 3.0版本之后的<code>SFunction</code>接口与该接口作用相同，区别在于添加了序列化，使开发者可通过传入getter Function匹配对应字段而无需再写字段名进行匹配，免除字段名写错的问题。</p></li><li><p><code>BiFunction&lt;T,U,R&gt;</code>：传入类型为T、U类型(T、U可以相同)的两个对象并执行含返回值的指定方法，方法可临时实现。常见于类Stream<code>{reduce();}</code>、Map<code>{replaceAll();computeIfPresent();compute();merge();}</code>等。</p></li><li><p><code>Consumer&lt;T&gt;</code>：传入单个对象并执行对象中无返回值的指定方法，方法可临时实现。常见于类List<code>{foreach();}</code>、Stream<code>{foreach();}</code>、Optional<code>{ifPresent();}</code>等。</p></li><li><p><code>BiConsumer&lt;T, U&gt;</code>：传入两个对象并执行对象中无返回值的指定方法，方法可临时实现。常见于类Stream<code>{collect();}</code>、Map<code>{foreach();}</code>等。</p></li><li><p><code>Supplier&lt;T&gt;</code>：供应商接口，可理解为对象的无参构造函数代理接口，每次调用其get()方法都会产生一个新的对象。常见于类Stream<code>{generate();collect();}</code>Objects<code>{requireNonNull();}</code>、ThreadLocal<code>{withInitial();}</code></p></li><li><p><code>Predicate&lt;T&gt;</code>：传入一个对象返回其指定行为方法执行结果布尔值，方法可临时实现。常见于类Optional<code>{filter();}</code>、Stream<code>{filter();anyMatch();allMatch();noneMatch();}</code>、ArrayList<code>{removeIf();}</code>等</p></li><li><p><code>BiPredicate&lt;T, U&gt;</code>：可根据前面的Bi接口与<code>Predicate</code>推断，不再多作阐述</p></li></ul><h1 id="常见的函数式接口用法"><a href="#常见的函数式接口用法" class="headerlink" title="常见的函数式接口用法"></a>常见的函数式接口用法</h1><p><strong>Stream中的函数式编程</strong></p><p>以下先以一段代码简单的介绍jdk中的函数式用法：</p><pre><code>List&lt;String&gt; list = Lists.newArrayList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;);String result = list.stream()                .filter(str -&gt; !StringUtils.equals(str, &quot;c&quot;))   // ① 参数为Predicate&lt;? super String&gt;,返回值为Stream&lt;String&gt;                .map(str -&gt; str + &quot;,&quot;)   // ② 参数为Function&lt;? super String, ? extends String&gt;,返回值为Stream&lt;String&gt;                .reduce((current, next) -&gt; current + next) // ③ 参数为BinaryOperator&lt;String&gt;,返回值为Optional&lt;String&gt;                .orElse(&quot;&quot;);</code></pre><p>List转为Stream后Stream中的泛型都会对应为List元素的类型，以下为上面几个stream对象方法的简单讲解：<br>①：实现了一个<code>Predicate&lt;String&gt;</code>接口，并让Stream对象调用该接口的实现操作去过滤获取列表中元素值不为<code>&quot;c&quot;</code>的元素<br>②:  实现了一个<code>Function&lt;String,String&gt;</code>接口，在每个元素末尾添加字符串”,”，并返回添加后的结果<br>③： 实现了一个<code>BinaryOperator&lt;String&gt;</code>接口，将stream的当前元素与下一个元素进行拼接并返回拼接结果。<code>BinaryOperator&lt;T&gt;</code>是<code>BiFunction&lt;T,U,R&gt;</code>的子接口，在2个参数类型与返回类型都相同的情况下可使用BinaryOperator接口替代<code>BiFunction</code>接口，但两个接口实质上都需要实现apply()方法进行操作并返回结果，并无太大区别，可把<code>BinaryOperator</code>当<code>成BiFunction</code>的一个子集，其定义如下：</p><pre><code>@FunctionalInterfacepublic interface BinaryOperator&lt;T&gt; extends BiFunction&lt;T,T,T&gt; {    ......}</code></pre><p>单看以上代码可能还无法体现出为什么叫函数式编程的原因，现在把以上代码还原为为函数实现显示样式：</p><pre><code>String result = list.stream()        .filter(new Predicate&lt;String&gt;() {            @Override            public boolean test(String s) {                return !StringUtils.equals(s, &quot;c&quot;);            }        })        .map(new Function&lt;String, String&gt;() {            @Override            public String apply(String s) {                return s + &quot;,&quot;;            }        })        .reduce(new BinaryOperator&lt;String&gt;() {            @Override            public String apply(String current, String next) {                return current + next;            }        })        .orElse(&quot;&quot;);</code></pre><p>两段的执行代码都可编译执行，对比可知第一段代码只是对第二段代码的简化，第二段代码中详细的显示了对列表转stream后的操作实现了哪些接口与实现的函数操作，显得十分臃肿，而第一段代码只显示了实现的函数操作，故个人认为将重点放在函数实现操作便是函数式编程的核心。<br>相信各个读者都发现了所有函数式接口所需实现的函数都有且仅有一个，个人认为目的除了更优雅的显示以外，还可以让程序知道即使我传入的是一个函数式接口实现类，程序依然会清楚它还要再去执行该类型的指定函数。</p><p><strong>List中的函数式编程</strong><br>List中含函数式接口参数的方法主要为foreach(Consumer)，遍历元素时将元素作为参数传入Consumer执行，最简单的例子为<code>list.forEach(System.out::println);</code>，调用System.out对象的println方法打印遍历的当前元素。</p><p><strong>Map中的函数式编程</strong><br>Map中个人常用的含函数式接口参数的方法主要为<code>foreach(BiConsumer&lt;? super K, ? super V&gt;)</code>和<code>compute(K,            BiFunction&lt;? super K, ? super V, ? extends V&gt;)</code>，其余的相信大家可以触类旁及。foreach为遍历当前map中的元素，前面介绍BiConsumer需要传入两个参数，而map.foreach()执行时每个key、value则作为参数传入到BiConsumer。虽然说需要传两个参数给BiConsumer，但不代表每个参数都必须用到，如下例中的BiConsumer只对每个val参数列表添加<code>“z”</code>字符串而没有用到key参数：</p><pre><code>Map&lt;String, List&lt;String&gt;&gt; map = new HashMap&lt;&gt;();map.put(&quot;0&quot;, Lists.newArrayList(&quot;&quot;));map.put(&quot;1&quot;, Lists.newArrayList(&quot;a&quot;));map.put(&quot;2&quot;, Lists.newArrayList(&quot;a&quot;, &quot;b&quot;));map.put(&quot;3&quot;, Lists.newArrayList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;));map.forEach((k,v) -&gt; v.add(&quot;z&quot;)); // ① 每个val列表末尾添加z字符串</code></pre><p>如果觉得有点难理解的可看以下函数还原代码：</p><pre><code>map.forEach(new BiConsumer&lt;String, List&lt;String&gt;&gt;() {   @Override    public void accept(String key, List&lt;String&gt; list) {        list.add(&quot;z&quot;);     }});</code></pre><p>Map的compute()方法根据名称大家也可以估到该方法是进行某些计算后再去设计key的值，可用于Map中指定key的值计算，在实际开发中个人常用于该情况：map的val为列表，map需要为指定key的val添加元素，添加前需判断val列表是否为空，为空则初始化后再添加，不为空则直接添加。</p><pre><code>map.compute(&quot;4&quot;,(key, list) -&gt; list == null ? Lists.newArrayList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;) : ListUtils.add(list,&quot;z&quot;));</code></pre><p>以上代码判断map中key为4的列表是否为空，若为空则将map中key为4的val设为元素为<code>&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;</code>的列表，不为空则在原val列表中添加字符串<code>&quot;z&quot;</code>。其中ListUtils为自定义工具类，其add方法返回参数列表，便于一行代码实现目的，实现如下：</p><pre><code>public static &lt;T&gt; List&lt;T&gt; add(List&lt;T&gt; list, T t) {    list.add(t);    return list;}</code></pre><p>看了map.compute()的都知道该函数可以替代在操作map一些情况下的if判断，若把上面的<code>compute()</code>方法使用<code>if</code>执行，则将变成以下代码块：</p><pre><code>if(map.containsKey(&quot;4&quot;)){    map.get(&quot;4&quot;).add(&quot;z&quot;);}else {    map.put(&quot;4&quot;,Lists.newArrayList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;));}</code></pre><p>可以看出适当的使用函数式编程可以为我们减少代码行。</p><p><strong>Optional简化if</strong><br>JDK1.8新增了Optional类使开发者可以减少if的语句块，类也含不少参数为函数式接口的方法，以下以一个简单的代码块进行介绍：</p><pre><code>Classify classify = new Classify();Optional.ofNullable(classify)        .map(Classify::getName)        .orElse(&quot;null&quot;);</code></pre><p>上例中把classify对象交给Optional代理，如果classify对象为空或classify对象中的name属性为空则返回字符串“null”，其中map的参数为Function。</p><p>看到这相信大家都了解到JDK中的函数式方法都是异曲同工，区别只在于在实际使用时泛型对应的实际类型。</p><h1 id="个人扩展用法"><a href="#个人扩展用法" class="headerlink" title="个人扩展用法"></a>个人扩展用法</h1><p>前面基本都是谈个人对函数式的认知与JDK原生类函数式参数方法的用法，而此处开始，是时候展现真正的技术了[doge]。函数式接口运用得当可以省略不少，下文将以几个个人实际开发中思考或使用过的例子进行函数式使用的思维拓展。</p><p>分类例子实体Classify：</p><pre><code>@Data@Accessors(chain = true)public class Classify {    private Long id;    private String name;    private Integer level;    private Long parentId;    private transient List&lt;Classify&gt; sonClassifies;}</code></pre><ul><li><h2 id="自定义ListUtils替代Stream的简单操作"><a href="#自定义ListUtils替代Stream的简单操作" class="headerlink" title="自定义ListUtils替代Stream的简单操作"></a>自定义ListUtils替代Stream的简单操作</h2></li></ul><p>现有一个<code>List&lt;Classify&gt;</code>的列表对象，现在需要将列表中所有分类的名字重新提取为一个列表，了解Stream会这样写：</p><pre><code>List&lt;String&gt; names = list.stream()        .map(Classify::getName)        .collect(Collectors.toList());</code></pre><p>又有一个需求需要将列表元素转化成key为id，value为name的映射，这时会写成如下：</p><pre><code>Map&lt;Long,String&gt; idNameMap =   list.stream()        .collect(Collectors.toMap(Classify::getId, Classify::getName));</code></pre><p>又又有一个需求需要将所有分类转换成key为parentId，value为子分类元素列表的映射，这时会写成如下：</p><pre><code>Map&lt;Long, List&lt;Classify&gt;&gt; parentSonsMap = list.stream()        .collect(Collectors.groupingBy(Classify::getParentId));</code></pre><p>以上写法都是比较普通的写法，应该任何人都可以接受，但我想这么简单的操作可不可以一行解决呢？也有部分开发者认为把所有stream方法调用放到同一行就可以了，但对我而言这会影响代码的可读性(虽然影响可能不大)。在开发者以上List转换的状况虽然不多，但也不算少，为了可一行代码取代Stream的简单操作，个人撸了一个List工具类放到了自己的通用框架中，通过Function作为参数取代Stream的简单操作，完整如下：</p><pre><code>public class ListUtils {    private ListUtils() {    }    public static &lt;T&gt; List&lt;T&gt; add(List&lt;T&gt; list, T t) {        list.add(t);        return list;    }    public static boolean isEmpty(Collection collection) {        return collection == null || collection.isEmpty();    }    public static boolean isNotEmpty(Collection collection) {        return !isEmpty(collection);    }    public static &lt;T&gt; ArrayList&lt;T&gt; newArrayList(T... elements) {        ArrayList&lt;T&gt; list = new ArrayList&lt;&gt;(elements.length + elements.length &gt;&gt; 1 + 5);        Collections.addAll(list, elements);        return list;    }    /**     * 条件为true时才添加元素     *     * @param condition  条件     * @param collection 集合     * @param val     * @return 添加结果     */    public static &lt;T&gt; boolean addIf(boolean condition, Collection&lt;T&gt; collection, T val) {        return condition &amp;&amp; collection.add(val);    }    /**     * 从对象列表中提取对象属性     *     * @param list      对象列表     * @param valGetter 对象属性get方法     * @param &lt;T&gt;       对象     * @param &lt;V&gt;       对象属性     * @return 对象属性列表     */    public static &lt;T, V&gt; List&lt;V&gt; collectToList(Collection&lt;T&gt; list, Function&lt;T, V&gt; valGetter) {        List&lt;V&gt; properties = new ArrayList&lt;&gt;(list.size());        list.forEach(e -&gt; properties.add(valGetter.apply(e)));        return properties;    }    /**     * 从对象列表中提取指定属性为key,当前对象为value转为map     *     * @param list     * @param keyGetter     * @param &lt;T&gt;     * @param &lt;K&gt;     * @return     */    public static &lt;T, K&gt; Map&lt;K, T&gt; collectToMap(Collection&lt;T&gt; list, Function&lt;T, K&gt; keyGetter) {        Map&lt;K, T&gt; propertiesMap = new HashMap&lt;&gt;(list.size());        list.forEach(e -&gt; propertiesMap.put(keyGetter.apply(e), e));        return propertiesMap;    }    /**     * 从对象列表中提取指定属性T为key,属性V为value转为map     *     * @param list      对象列表     * @param keyGetter     * @param valGetter     * @param &lt;T&gt;     * @param &lt;K&gt;     * @param &lt;V&gt;     * @return     */    public static &lt;T, K, V&gt; Map&lt;K, V&gt; collectToMap(Collection&lt;T&gt; list, Function&lt;T, K&gt; keyGetter, Function&lt;T, V&gt; valGetter) {        Map&lt;K, V&gt; propertiesMap = new HashMap&lt;&gt;(list.size());        list.forEach(e -&gt; propertiesMap.put(keyGetter.apply(e), valGetter.apply(e)));        return propertiesMap;    }    /**     * 根据列表对象中的某属性值为key划分列表,value为key的属性值相同的对象列表,     * 功能同stream().collect(Collectors.groupingBy())     *     * @param list     * @param keyGetter     * @param &lt;T&gt;     * @param &lt;K&gt;     * @return     */    public static &lt;T, K&gt; Map&lt;K, List&lt;T&gt;&gt; groupToMap(Collection&lt;T&gt; list, Function&lt;T, K&gt; keyGetter) {        Map&lt;K, List&lt;T&gt;&gt; propertiesMap = new HashMap&lt;&gt;(list.size());        for (T each : list) {            propertiesMap.compute(keyGetter.apply(each),                    (key, valueList) -&gt; isEmpty(valueList) ? add(new ArrayList&lt;&gt;(list.size()), each) : add(valueList, each));        }        return propertiesMap;    }    /**     * 根据列表对象中的某属性值为key划分列表,value为key的属性值相同的对象列表,value为key的属性值相同的对象中指定属性的值列表,     * 功能同stream().collect(Collectors.groupingBy())     *     * @param list     * @param keyGetter     * @param valGetter     * @param &lt;T&gt;     * @param &lt;K&gt;     * @param &lt;V&gt;     * @return     */    public static &lt;T, K, V&gt; Map&lt;K, List&lt;V&gt;&gt; groupToMap(Collection&lt;T&gt; list, Function&lt;T, K&gt; keyGetter, Function&lt;T, V&gt; valGetter) {        Map&lt;K, List&lt;V&gt;&gt; propertiesMap = new HashMap&lt;&gt;(list.size());        for (T each : list) {            K key = keyGetter.apply(each);            List&lt;V&gt; values = Optional.ofNullable(propertiesMap.get(key)).orElse(new ArrayList&lt;&gt;());            values.add(valGetter.apply(each));            propertiesMap.put(key, values);        }        return propertiesMap;    }    /**     * 获取列表中重复的值     *     * @param list     * @param &lt;T&gt;     * @return     */    public static &lt;T&gt; Set&lt;T&gt; collectRepeats(Collection&lt;T&gt; list) {        Set&lt;T&gt; set = new HashSet&lt;&gt;(list.size());        return list.stream()                .filter(e -&gt; !set.add(e))                .collect(Collectors.toSet());    }    /**     * 按指定大小，分隔集合，将集合按规定个数分为n个部分     *     * @param &lt;T&gt;     * @param list     * @param len     * @return     */    public static &lt;T&gt; List&lt;List&lt;T&gt;&gt; splitList(List&lt;T&gt; list, int len) {        if (list == null || list.isEmpty() || len &lt; 1) {            return Collections.emptyList();        }        List&lt;List&lt;T&gt;&gt; result = new ArrayList&lt;&gt;();        int size = list.size();        int count = (size + len - 1) / len;        for (int i = 0; i &lt; count; i++) {            List&lt;T&gt; subList = list.subList(i * len, ((i + 1) * len &gt; size ? size : len * (i + 1)));            result.add(subList);        }        return result;    }}</code></pre><p>看看使用该工具类替代Stream简单操作后的效果吧：</p><pre><code>List&lt;String&gt; namess = ListUtils.collectToList(list,Classify::getName);Map&lt;Long, String&gt; idMap = ListUtils.collectToMap(list,Classify::getId,Classify::getName);Map&lt;Long, List&lt;Classify&gt;&gt; parentSonsMap = ListUtils.groupToMap(list,Classify::getParentId);// 将List转化成key为parentId,value为子分类name列表的映射Map&lt;Long, List&lt;String&gt;&gt; parentSonNamesMap = ListUtils.groupToMap(list,Classify::getId,Classify::getName);</code></pre><p>可以看出通过函数式接口作为参数传递，不仅可以增加程序的可读性，还可以为我们的编码开发添加不少扩展性。</p><ul><li><h2 id="简化局部不同多处相同的代码块"><a href="#简化局部不同多处相同的代码块" class="headerlink" title="简化局部不同多处相同的代码块"></a>简化局部不同多处相同的代码块</h2></li></ul><p>局部不同多出相同的代码块重复出现的状况总会遇到，如一些业务代码前后都相同唯独中间不同，如DB连接-操作-释放、Ssh连接-操作-释放，以下将以一个ssh连接-操作-释放的代码来扩展函数式编程简化代码的用法。<br>可能会有人疑问ssh连接-操作-释放这样的实际操作业务不多吧？就在一段时间之前，上级让我去Zabbix查看各服务器的CPU、内存、磁盘使用率然后写入文档。看到机器数的我内心是拒接的，于是想出了使用java ssh连接到服务器执行相应的查看指令然后提取占用率打印到控制台上，再copy到文档中（反正得到了默许了）。以下是未优化前的两个查询方法：</p><pre><code>/** * 查询cpu占用率 */public static String cpuPercent(String ip, String username, String passw    JSch jsch = new JSch();    Session session = null;    Channel channel = null;    String cpuPercent = null;    try {        session = jsch.getSession(username, ip, 22);        Properties config = new Properties();        config.put(&quot;StrictHostKeyChecking&quot;, &quot;no&quot;);        session.setConfig(config);        session.setPassword(password);        session.connect();        String cmd = &quot;sar -u 3 1|awk &apos;{print $8}&apos;|tail -1&quot;;        channel = session.openChannel(&quot;exec&quot;);        ((ChannelExec) channel).setCommand(cmd);        ((ChannelExec) channel).setErrStream(System.err);        ((ChannelExec) channel).setPty(true);        channel.connect();        InputStream in = channel.getInputStream();        String output = IOUtils.toString(in, StandardCharsets.UTF_8);        cpuPercent = HUNDRED.subtract(BigDecimal.valueOf(Double.valueOf(                .setScale(2, RoundingMode.HALF_UP)                .toString() + &quot;%&quot;;    } catch (Exception e) {        e.printStackTrace();    } finally {        if (channel != null) {            channel.disconnect();        }        if (session != null) {            session.disconnect();        }    }    return cpuPercent;}/** * 磁盘占用率查询 */public static String diskPercent(String ip, String username, String pass    JSch jsch = new JSch();    Session session = null;    Channel channel = null;    String diskPercent = null;    try {        session = jsch.getSession(username, ip, 22);        Properties config = new Properties();        config.put(&quot;StrictHostKeyChecking&quot;, &quot;no&quot;);        session.setConfig(config);        session.setPassword(password);        session.connect();          String cmd = &quot;df -hl | grep apps|tail -1|awk &apos;{print $4}&apos;&quot;;        String cmd = &quot;df -hl | grep apps|tail -1|awk &apos;{print $5}&apos;&quot;;        channel = session.openChannel(&quot;exec&quot;);        ((ChannelExec) channel).setCommand(cmd);        ((ChannelExec) channel).setErrStream(System.err);        ((ChannelExec) channel).setPty(true);        channel.connect();        InputStream in = channel.getInputStream();        diskPercent = IOUtils.toString(in, StandardCharsets.UTF_8);    } catch (Exception e) {        e.printStackTrace();    } finally {        if (channel != null) {            channel.disconnect();        }        if (session != null) {            session.disconnect();        }    }    return diskPercent;}</code></pre><p>相信大家可以看出Ssh连接与释放的代码块是相同的，唯独操作是不同的，于是我把相同的代码块写入了一个方法中，操作的代码块作为参数，优化后的完整代码如下：</p><pre><code>public class SshClientUtils {    private static final BigDecimal HUNDRED = BigDecimal.valueOf(100);    private static final String RESULT_FORMAT = &quot;%s\t\t%s\t\t%s\t%s&quot;;    /**     * 执行查询cpu、mem、disk命令并打印各占用率     */    public static void exec(SshConfig sshConfig) {        System.err.println(&quot;cpu%\t\tmem%\t\tdisk\tip&quot;);        String username = sshConfig.getUsername();        String password = sshConfig.getPassword();        List&lt;String&gt; ipList = sshConfig.getIpList();        ipList.forEach(ip -&gt; {            String cpuPercent = cpuPercent(ip, username, password);            String memoryPercent = memoryPercent(ip, username, password);            String diskPercent = diskPercent(ip, username, password);            System.out.println(String.format(RESULT_FORMAT, cpuPercent, memoryPercent, diskPercent, ip)                    .replaceAll(&quot;\n|\r\n&quot;, &quot;&quot;));        });    }    /**     * 查询cpu占用率     */    public static String cpuPercent(String ip, String username, String password) {        String cmd = &quot;sar -u 3 1|awk &apos;{print $8}&apos;|tail -1&quot;;        return exec(ip, username, password, cmd, output -&gt; HUNDRED.subtract(BigDecimal.valueOf(Double.valueOf(output)))                .setScale(2, RoundingMode.HALF_UP)                .toString() + &quot;%&quot;);    }    /**     * 内存占用率查询     */    public static String memoryPercent(String ip, String username, String password) {        String cmd = &quot;free|grep Mem&quot;;        return exec(ip, username, password, cmd, output -&gt; {            String[] memories = output.replaceAll(&quot;\\s+&quot;, &quot;,&quot;)                    .substring(5)                    .split(&quot;,&quot;);            double total = Integer.parseInt(memories[0]);            double free = Integer.parseInt(memories[2]);            double buffers = Integer.parseInt(memories[4]);            double cache = Integer.parseInt(memories[5]);            BigDecimal freePercent = BigDecimal.valueOf((free + buffers + cache) / total)                    .setScale(6, RoundingMode.HALF_UP);            return BigDecimal.ONE.subtract(freePercent)                    .multiply(HUNDRED)                    .setScale(2, RoundingMode.HALF_UP)                    .toString() + &quot;%&quot;;        });    }    /**     * 磁盘占用率查询     */    public static String diskPercent(String ip, String username, String password) {        String cmd = &quot;df -hl | grep apps|tail -1|awk &apos;{print $5}&apos;&quot;;        return exec(ip, username, password, cmd, output -&gt; output);    }    /**     * 直接执行命令     */    public static String exec(String ip, String username, String password, String command, Function&lt;String, String&gt; execFunc) {        JSch jsch = new JSch();        Session session = null;        Channel channel = null;        try {            session = jsch.getSession(username, ip, 22);            Properties config = new Properties();            config.put(&quot;StrictHostKeyChecking&quot;, &quot;no&quot;);            session.setConfig(config);            session.setPassword(password);            session.connect();            channel = session.openChannel(&quot;exec&quot;);            ((ChannelExec) channel).setCommand(command);            ((ChannelExec) channel).setErrStream(System.err);            ((ChannelExec) channel).setPty(true);            channel.connect();            InputStream in = channel.getInputStream();            String output = IOUtils.toString(in, StandardCharsets.UTF_8);            return func.apply(execFunc);        } catch (Exception e) {            e.printStackTrace();        } finally {            if (channel != null) {                channel.disconnect();            }            if (session != null) {                session.disconnect();            }        }        return null;    }}</code></pre><p>可以看出优化的代码将Ssh的连接与操作都抽象到exec()方法中了，而实际操作则是由入参的Function实现决定，以上便是一个通过Function优化代码部分不同的例子。</p><p><strong>将if-set对象属性通过函数式接口放到对象内部执行</strong><br>话多不如实例，相信大家都遇到过类似以下这样的情况：</p><pre>if(condition1){    classify.setName("Wilson");}if(condition2){    classify.setLevel(5);}</pre><p>好麻烦，能不能再简单一点(我的简单永远没有上限)，现在先对以上代码块分析一下(简化的核心在于抽离)，相同的部分主要有if、classify，不同的部分为condition的值、set方法、set的值，既然有相同的就作为方法，不同的就作为参数吧(是不是跟ssh的例子想法差别不大吧)，于是我在Classify类中添加了以下方法：</p><pre><code>public &lt;V&gt; Classify set(boolean isSet, V value, BiFunction&lt;Classify, V, Classify&gt; setFunction) {    return isSet ? setFunction.apply(this, value) : this;}</code></pre><p>???<br>唔，这里可能有一些门槛，如果暂时不理解或觉得无法灵活运动的也不用着急，代码都是慢慢磨出来的，调用一下吧：</p><pre><code>Classify classify = new Classify();classify.set(true, &quot;Wilson&quot;, Classify::setName)        .set(false, 5, Classify::setLevel);System.out.println(classify);// 打印出Classify(id=null, name=Wilson, level=null, parentId=null, sonClassifies=null)</code></pre><p>由于Classify在类上添加了Lombok的注解<code>@Accessors(chain = true)</code>，所以每个set方法结果都会返回当前对象方便链式调用(我很喜欢链式)，所以上面的set方法可以直接返回apply(this,setFunction)的结果。BiFunction前面有提过是需要两个参数并返回一个结果的，在该例子中，由于Classify的setProperty()是返回当前对象的，所以不能用Function&lt;T,R&gt;作为set()的函数式参数(否则T与R都是Classify，无法设置属性)，Classify对象作为BiFunction的第一个参数，set()方法的value作为第二个参数，当前classify对象作为返回值，这样就可以保持我的对象可以继续链式调用各set方法。<br>也有会有人疑问set方法设置返回值不会影响程序的正常运行(如框架的调用)吗？这里个人是从反射与Java关键字void的角度思考过后就一直习惯使对象set方法返回当前对象了，这里希望大家也思考一下便不多作讲解了。</p><ul><li><h2 id="使用Supplier再提高一下copyProperties的逼格"><a href="#使用Supplier再提高一下copyProperties的逼格" class="headerlink" title="使用Supplier再提高一下copyProperties的逼格"></a>使用Supplier再提高一下copyProperties的逼格</h2><p>相信接触过Spring的都会使用过其中BeanUtils的<code>copyProperties()</code>方法，个人经常使用该方法进行VO属性到Model属性的设置，Model一般都是现场new所以内部属性都是的，反正都是空的何不再通过Supplier函数式接口扩展一下工具类提高一下逼格呢？于是便有了以下代码：</p><p>  @NoArgsConstructor<br>  public class ObjectUtils {</p><pre><code>public static &lt;S, T&gt; T copyProperties(S source, T target) {    BeanUtils.copyProperties(source, target);    return target;}public static &lt;S, T&gt; T copyProperties(S source, Supplier&lt;T&gt; targetSupplier) {    T target = targetSupplier.get();    BeanUtils.copyProperties(source, target);    return target;}</code></pre><p>  }</p></li></ul><p>再以一段Controller的伪代码演示一下:<br><code>Long id = classifyService.insert(ObjectUtils.copyProperties(classifyVO,Classify::new));</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;该文章主要介绍JDK中各种常见的函数式接口，并会附上一些个人对函数式编程的一些扩展思考与实际用法。&lt;/p&gt;
&lt;h1 id=&quot;常见的函数式接口
      
    
    </summary>
    
    
      <category term="Java基础" scheme="https://wilson-he.gitee.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
</feed>
